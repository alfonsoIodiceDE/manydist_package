"0","cat(""\\n=== IMPLEMENTING AKHANLI & HENNIG VALIDATION FRAMEWORK ===\\n"")"
"1","\n=== IMPLEMENTING AKHANLI & HENNIG VALIDATION FRAMEWORK ===\n"
"0","# Individual clustering quality indexes (following Akhanli & Hennig 2020)"
"0",""
"0","# 1. Average within-cluster dissimilarities"
"0","calculate_within_cluster_dissim <- function(distance_matrix, cluster_labels) {"
"0","  "
"0","  n <- length(cluster_labels)"
"0","  total_sum <- 0"
"0","  total_pairs <- 0"
"0","  "
"0","  for (k in unique(cluster_labels)) {"
"0","    cluster_indices <- which(cluster_labels == k)"
"0","    nk <- length(cluster_indices)"
"0","    "
"0","    if (nk > 1) {"
"0","      # Calculate sum of pairwise distances within cluster"
"0","      cluster_distances <- distance_matrix[cluster_indices, cluster_indices]"
"0","      cluster_sum <- sum(cluster_distances[upper.tri(cluster_distances)])"
"0","      cluster_pairs <- nk * (nk - 1) / 2"
"0","      "
"0","      total_sum <- total_sum + cluster_sum"
"0","      total_pairs <- total_pairs + cluster_pairs"
"0","    }"
"0","  }"
"0","  "
"0","  return(if (total_pairs > 0) total_sum / total_pairs else 0)"
"0","}"
"0",""
"0","# 2. Separation index"
"0","calculate_separation_index <- function(distance_matrix, cluster_labels, p = 0.1) {"
"0","  "
"0","  n <- length(cluster_labels)"
"0","  separation_values <- c()"
"0","  "
"0","  for (k in unique(cluster_labels)) {"
"0","    cluster_indices <- which(cluster_labels == k)"
"0","    "
"0","    for (i in cluster_indices) {"
"0","      # Find minimum distance to points in other clusters"
"0","      other_indices <- which(cluster_labels != cluster_labels[i])"
"0","      if (length(other_indices) > 0) {"
"0","        min_dist_to_other <- min(distance_matrix[i, other_indices])"
"0","        separation_values <- c(separation_values, min_dist_to_other)"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  if (length(separation_values) > 0) {"
"0","    # Take p-th percentile of border points  "
"0","    border_threshold <- quantile(separation_values, p)"
"0","    return(mean(separation_values[separation_values <= border_threshold]))"
"0","  } else {"
"0","    return(0)"
"0","  }"
"0","}"
"0",""
"0","# 3. Entropy (cluster size balance)"
"0","calculate_entropy <- function(cluster_labels) {"
"0","  cluster_counts <- table(cluster_labels)"
"0","  n <- length(cluster_labels)"
"0","  "
"0","  entropy <- -sum((cluster_counts / n) * log(cluster_counts / n))"
"0","  return(entropy)"
"0","}"
"0",""
"0","# 4. Pearson correlation index (representation quality)"
"0","calculate_pearson_gamma <- function(distance_matrix, cluster_labels) {"
"0","  "
"0","  n <- length(cluster_labels)"
"0","  "
"0","  # Create clustering-induced dissimilarity"
"0","  cluster_dissim <- matrix(0, n, n)"
"0","  for (i in 1:n) {"
"0","    for (j in 1:n) {"
"0","      cluster_dissim[i, j] <- if (cluster_labels[i] != cluster_labels[j]) 1 else 0"
"0","    }"
"0","  }"
"0","  "
"0","  # Extract upper triangular elements"
"0","  upper_tri <- upper.tri(distance_matrix)"
"0","  original_distances <- distance_matrix[upper_tri]"
"0","  cluster_distances <- cluster_dissim[upper_tri]"
"0","  "
"0","  # Calculate Pearson correlation"
"0","  correlation <- cor(original_distances, cluster_distances, method = ""pearson"")"
"0","  return(correlation)"
"0","}"
"0",""
"0","# 5. Bootstrap stability (simplified version)"
"0","calculate_bootstrap_stability <- function(distance_matrix, cluster_labels, "
"0","                                          clustering_method, k, n_bootstrap = 50) {"
"0","  "
"0","  n <- nrow(distance_matrix)"
"0","  stability_scores <- c()"
"0","  "
"0","  for (b in 1:n_bootstrap) {"
"0","    # Bootstrap sample"
"0","    boot_indices <- sample(1:n, n, replace = TRUE)"
"0","    boot_distance_matrix <- distance_matrix[boot_indices, boot_indices]"
"0","    "
"0","    tryCatch({"
"0","      # Re-cluster bootstrap sample"
"0","      boot_labels <- clustering_methods[[clustering_method]](boot_distance_matrix, k)"
"0","      "
"0","      # Calculate adjusted rand index with original clustering"
"0","      original_boot_labels <- cluster_labels[boot_indices]"
"0","      ari <- mclust::adjustedRandIndex(original_boot_labels, boot_labels)"
"0","      stability_scores <- c(stability_scores, ari)"
"0","      "
"0","    }, error = function(e) {"
"0","      # Skip failed bootstrap iterations"
"0","    })"
"0","  }"
"0","  "
"0","  return(if (length(stability_scores) > 0) mean(stability_scores) else 0)"
"0","}"
"0",""
"0","# Comprehensive clustering validation function"
"0","evaluate_clustering_quality <- function(distance_matrix, cluster_labels, "
"0","                                        clustering_method, k, detailed = FALSE) {"
"0","  "
"0","  # Calculate individual indexes"
"0","  within_dissim <- calculate_within_cluster_dissim(distance_matrix, cluster_labels)"
"0","  separation <- calculate_separation_index(distance_matrix, cluster_labels)"
"0","  entropy <- calculate_entropy(cluster_labels)"
"0","  pearson_gamma <- calculate_pearson_gamma(distance_matrix, cluster_labels)"
"0","  "
"0","  # Bootstrap stability (computationally expensive, so optional)"
"0","  stability <- if (detailed) {"
"0","    calculate_bootstrap_stability(distance_matrix, cluster_labels, clustering_method, k)"
"0","  } else {"
"0","    NA"
"0","  }"
"0","  "
"0","  return(list("
"0","    within_cluster_dissim = within_dissim,"
"0","    separation = separation, "
"0","    entropy = entropy,"
"0","    pearson_gamma = pearson_gamma,"
"0","    bootstrap_stability = stability,"
"0","    n_clusters = length(unique(cluster_labels)),"
"0","    cluster_sizes = as.vector(table(cluster_labels))"
"0","  ))"
"0","}"
"0",""
"0","cat(""✓ Validation framework functions implemented\\n"")"
"1","✓ Validation framework functions implemented\n"
