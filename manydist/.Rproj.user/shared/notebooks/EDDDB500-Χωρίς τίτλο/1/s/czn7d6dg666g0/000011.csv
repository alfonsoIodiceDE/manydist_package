"0","cat(""\\n=== CALCULATING DISTANCE MATRICES ===\\n"")"
"1","\n=== CALCULATING DISTANCE MATRICES ===\n"
"0","# Prepare data for distance calculation (exclude non-clustering variables)"
"0","distance_data <- clustering_data[, final_clustering_vars, with = FALSE]"
"0",""
"0","# Handle any remaining missing values with median/mode imputation"
"0","cat(""→ Final missing value treatment...\\n"")"
"1","→ Final missing value treatment...\n"
"0","for (var in names(distance_data)) {"
"0","  if (any(is.na(distance_data[[var]]))) {"
"0","    if (is.factor(distance_data[[var]])) {"
"0","      # Mode imputation for categorical"
"0","      mode_val <- names(sort(table(distance_data[[var]]), decreasing = TRUE))[1]"
"0","      distance_data[is.na(get(var)), (var) := mode_val]"
"0","    } else {"
"0","      # Median imputation for continuous"
"0","      median_val <- median(distance_data[[var]], na.rm = TRUE)"
"0","      distance_data[is.na(get(var)), (var) := median_val]"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","cat(""✓ Missing values handled\\n"")"
"1","✓ Missing values handled\n"
"0","# Calculate distance matrices for each method"
"0","distance_matrices <- list()"
"0",""
"0","for (method_name in names(DISTANCE_METHODS)) {"
"0","  cat(sprintf(""→ Calculating %s distance matrix...\\n"", method_name))"
"0","  "
"0","  method_info <- DISTANCE_METHODS[[method_name]]"
"0","  "
"0","  tryCatch({"
"0","    "
"0","    # Time the distance calculation"
"0","    start_time <- Sys.time()"
"0","    "
"0","    # Calculate distance matrix using mdist"
"0","    dist_matrix <- do.call(mdist, c(list(x = distance_data), method_info$params))"
"0","    "
"0","    end_time <- Sys.time()"
"0","    calc_time <- as.numeric(difftime(end_time, start_time, units = ""secs""))"
"0","    "
"0","    # Store results"
"0","    distance_matrices[[method_name]] <- list("
"0","      matrix = dist_matrix,"
"0","      method = method_info$name,"
"0","      description = method_info$description,"
"0","      calculation_time = calc_time,"
"0","      params = method_info$params"
"0","    )"
"0","    "
"0","    cat(sprintf(""✓ %s completed in %.1f seconds\\n"", method_name, calc_time))"
"0","    cat(sprintf(""  Matrix dimensions: %d × %d\\n"", nrow(dist_matrix), ncol(dist_matrix)))"
"0","    cat(sprintf(""  Distance range: [%.3f, %.3f]\\n"", "
"0","                min(dist_matrix, na.rm = TRUE), max(dist_matrix, na.rm = TRUE)))"
"0","    "
"0","  }, error = function(e) {"
"0","    cat(sprintf(""✗ Error calculating %s: %s\\n"", method_name, e$message))"
"0","    distance_matrices[[method_name]] <- NULL"
"0","  })"
"0","}"
"1","→ Calculating unbiased_independent distance matrix...\n"
"1","✓ unbiased_independent completed in 9.8 seconds\n"
"1","  Matrix dimensions: 4543 × 4543\n"
"1","  Distance range: [0.000, 187.046]\n"
"1","→ Calculating unbiased_dependent distance matrix...\n"
"1","✓ unbiased_dependent completed in 8.7 seconds\n"
"1","  Matrix dimensions: 4543 × 4543\n"
"1","  Distance range: [0.000, 206.479]\n"
"0","cat(sprintf(""✓ Successfully calculated %d distance matrices\\n"", "
"0","            length(distance_matrices[!sapply(distance_matrices, is.null)])))"
"1","✓ Successfully calculated 2 distance matrices\n"
