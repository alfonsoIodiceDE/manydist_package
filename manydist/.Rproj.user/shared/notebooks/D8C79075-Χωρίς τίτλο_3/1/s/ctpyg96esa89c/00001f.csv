"0","# REVISED: Extract clusters for ALL three purposes"
"0","extract_all_clusters_from_solutions <- function(enhanced_clustering_results) {"
"0","  "
"0","  all_cluster_assignments <- list("
"0","    policy = list(),"
"0","    intervention = list(),"
"0","    equity = list()"
"0","  )"
"0","  "
"0","  for (cycle_name in names(enhanced_clustering_results)) {"
"0","    result <- enhanced_clustering_results[[cycle_name]]"
"0","    "
"0","    cat(sprintf(""\n→ Extracting all cluster types for PISA %s...\n"", cycle_name))"
"0","    "
"0","    # Extract clusters for each purpose"
"0","    for (purpose in c(""policy"", ""intervention"", ""equity"")) {"
"0","      "
"0","      if (!is.null(result$optimal_solutions[[purpose]])) {"
"0","        "
"0","        sol <- result$optimal_solutions[[purpose]]"
"0","        dist_method <- sol$distance_method"
"0","        "
"0","        # Get the distance matrix"
"0","        dist_matrix <- result$distance_matrices[[dist_method]]$matrix"
"0","        "
"0","        # Parse the solution to get method and k"
"0","        solution_parts <- strsplit(sol$solution, ""\\."")[[1]]"
"0","        method_name <- solution_parts[1]"
"0","        k_value <- as.numeric(solution_parts[2])"
"0","        "
"0","        # Perform the clustering based on method"
"0","        clusters <- NULL"
"0","        "
"0","        if (method_name == ""Ward"") {"
"0","          hc <- hclust(dist_matrix, method = ""ward.D2"")"
"0","          clusters <- cutree(hc, k = k_value)"
"0","        } else if (method_name == ""Average"") {"
"0","          hc <- hclust(dist_matrix, method = ""complete"")"
"0","          clusters <- cutree(hc, k = k_value)"
"0","        } else if (method_name == ""Complete"") {"
"0","          hc <- hclust(dist_matrix, method = ""complete"")"
"0","          clusters <- cutree(hc, k = k_value)"
"0","        } else if (method_name == ""PAM"") {"
"0","          clusters <- pam(dist_matrix, k = k_value, diss = TRUE)$clustering"
"0","        } else {"
"0","          # Default to PAM"
"0","          clusters <- pam(dist_matrix, k = k_value, diss = TRUE)$clustering"
"0","        }"
"0","        "
"0","        # Store the cluster assignment"
"0","        all_cluster_assignments[[purpose]][[cycle_name]] <- list("
"0","          clusters = clusters,"
"0","          method = method_name,"
"0","          k = k_value,"
"0","          distance_method = dist_method,"
"0","          purpose = purpose,"
"0","          cycle = cycle_name,"
"0","          solution_name = sol$solution,"
"0","          score = sol$score"
"0","        )"
"0","        "
"0","        cat(sprintf(""  %s: %d clusters using %s method with %s distance (Score: %.3f)\n"","
"0","                    toupper(purpose), k_value, method_name, dist_method, sol$score))"
"0","        "
"0","      } else {"
"0","        cat(sprintf(""  %s: No solution available\n"", toupper(purpose)))"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  return(all_cluster_assignments)"
"0","}"
"0",""
"0","# REVISED: Enhanced cluster summary function"
"0","summarize_all_clusters <- function(all_cluster_assignments) {"
"0","  "
"0","  cat(""\n=== COMPREHENSIVE CLUSTER ASSIGNMENT SUMMARY ===\n"")"
"0","  "
"0","  for (purpose in names(all_cluster_assignments)) {"
"0","    "
"0","    cat(sprintf(""\n--- %s CLUSTERS ---\n"", toupper(purpose)))"
"0","    "
"0","    purpose_clusters <- all_cluster_assignments[[purpose]]"
"0","    "
"0","    if (length(purpose_clusters) == 0) {"
"0","      cat(""No clusters extracted for this purpose\n"")"
"0","      next"
"0","    }"
"0","    "
"0","    for (cycle_name in names(purpose_clusters)) {"
"0","      cluster_info <- purpose_clusters[[cycle_name]]"
"0","      "
"0","      cat(sprintf(""PISA %s:\n"", cycle_name))"
"0","      cat(sprintf(""  Solution: %s\n"", cluster_info$solution_name))"
"0","      cat(sprintf(""  Method: %s linkage\n"", cluster_info$method))"
"0","      cat(sprintf(""  Distance: %s\n"", cluster_info$distance_method))"
"0","      cat(sprintf(""  Clusters: %d\n"", cluster_info$k))"
"0","      cat(sprintf(""  Score: %.3f\n"", cluster_info$score))"
"0","      cat(sprintf(""  Students: %d\n"", length(cluster_info$clusters)))"
"0","      "
"0","      # Show cluster distribution"
"0","      cluster_table <- table(cluster_info$clusters)"
"0","      cat(""  Distribution:"", paste(names(cluster_table), ""="", cluster_table, collapse = "", ""), ""\n"")"
"0","      "
"0","      cat(""\n"")"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","# REVISED: Function to add cluster assignments to original data"
"0","add_clusters_to_data <- function(cycle_prepared_data, all_cluster_assignments) {"
"0","  "
"0","  enhanced_data <- list()"
"0","  "
"0","  for (cycle_name in names(cycle_prepared_data)) {"
"0","    "
"0","    cat(sprintf(""→ Adding cluster assignments to PISA %s data...\n"", cycle_name))"
"0","    "
"0","    # Start with the original prepared data"
"0","    cycle_data <- cycle_prepared_data[[cycle_name]]$data"
"0","    enhanced_cycle_data <- copy(cycle_data)"
"0","    "
"0","    # Add cluster assignments for each purpose"
"0","    for (purpose in names(all_cluster_assignments)) {"
"0","      "
"0","      if (cycle_name %in% names(all_cluster_assignments[[purpose]])) {"
"0","        "
"0","        cluster_info <- all_cluster_assignments[[purpose]][[cycle_name]]"
"0","        clusters <- cluster_info$clusters"
"0","        "
"0","        # Create column name"
"0","        cluster_col_name <- paste0(""CLUSTER_"", toupper(purpose))"
"0","        "
"0","        # Add clusters (need to handle potential row mismatches)"
"0","        if (length(clusters) == nrow(enhanced_cycle_data)) {"
"0","          enhanced_cycle_data[[cluster_col_name]] <- clusters"
"0","          cat(sprintf(""  ✓ Added %s clusters (%d groups)\n"", "
"0","                      purpose, cluster_info$k))"
"0","        } else {"
"0","          cat(sprintf(""  ⚠ %s cluster count mismatch: %d clusters vs %d rows\n"","
"0","                      purpose, length(clusters), nrow(enhanced_cycle_data)))"
"0","        }"
"0","      }"
"0","    }"
"0","    "
"0","    enhanced_data[[cycle_name]] <- list("
"0","      data = enhanced_cycle_data,"
"0","      clustering_vars = cycle_prepared_data[[cycle_name]]$clustering_vars,"
"0","      categorical_vars = cycle_prepared_data[[cycle_name]]$categorical_vars,"
"0","      continuous_vars = cycle_prepared_data[[cycle_name]]$continuous_vars,"
"0","      cycle = cycle_name,"
"0","      cluster_info = all_cluster_assignments"
"0","    )"
"0","  }"
"0","  "
"0","  return(enhanced_data)"
"0","}"
"0",""
"0","# REVISED: Cross-purpose cluster comparison"
"0","compare_cluster_purposes <- function(all_cluster_assignments) {"
"0","  "
"0","  cat(""\n=== CROSS-PURPOSE CLUSTER COMPARISON ===\n"")"
"0","  "
"0","  for (cycle_name in names(enhanced_clustering_results)) {"
"0","    "
"0","    cat(sprintf(""\n--- PISA %s COMPARISON ---\n"", cycle_name))"
"0","    "
"0","    # Check if all three purposes have solutions"
"0","    purposes_available <- c()"
"0","    for (purpose in c(""policy"", ""intervention"", ""equity"")) {"
"0","      if (cycle_name %in% names(all_cluster_assignments[[purpose]])) {"
"0","        purposes_available <- c(purposes_available, purpose)"
"0","      }"
"0","    }"
"0","    "
"0","    if (length(purposes_available) == 0) {"
"0","      cat(""No cluster solutions available\n"")"
"0","      next"
"0","    }"
"0","    "
"0","    cat(sprintf(""Available solutions: %s\n"", paste(purposes_available, collapse = "", "")))"
"0","    "
"0","    # Create comparison table"
"0","    comparison_df <- data.frame("
"0","      Purpose = character(0),"
"0","      Solution = character(0),"
"0","      Method = character(0),"
"0","      Distance = character(0),"
"0","      K = numeric(0),"
"0","      Score = numeric(0),"
"0","      stringsAsFactors = FALSE"
"0","    )"
"0","    "
"0","    for (purpose in purposes_available) {"
"0","      cluster_info <- all_cluster_assignments[[purpose]][[cycle_name]]"
"0","      "
"0","      comparison_df <- rbind(comparison_df, data.frame("
"0","        Purpose = toupper(purpose),"
"0","        Solution = cluster_info$solution_name,"
"0","        Method = cluster_info$method,"
"0","        Distance = cluster_info$distance_method,"
"0","        K = cluster_info$k,"
"0","        Score = round(cluster_info$score, 3),"
"0","        stringsAsFactors = FALSE"
"0","      ))"
"0","    }"
"0","    "
"0","    print(comparison_df)"
"0","    "
"0","    # If we have multiple solutions, check cluster agreement"
"0","    if (length(purposes_available) > 1) {"
"0","      "
"0","      cat(""\nCluster agreement analysis:\n"")"
"0","      "
"0","      # Get cluster assignments for available purposes"
"0","      cluster_matrices <- list()"
"0","      for (purpose in purposes_available) {"
"0","        cluster_matrices[[purpose]] <- all_cluster_assignments[[purpose]][[cycle_name]]$clusters"
"0","      }"
"0","      "
"0","      # Calculate pairwise agreement (Adjusted Rand Index)"
"0","      if (length(cluster_matrices) >= 2) {"
"0","        library(mclust)"
"0","        "
"0","        purpose_pairs <- combn(purposes_available, 2, simplify = FALSE)"
"0","        "
"0","        for (pair in purpose_pairs) {"
"0","          purpose1 <- pair[1]"
"0","          purpose2 <- pair[2]"
"0","          "
"0","          clusters1 <- cluster_matrices[[purpose1]]"
"0","          clusters2 <- cluster_matrices[[purpose2]]"
"0","          "
"0","          if (length(clusters1) == length(clusters2)) {"
"0","            ari <- adjustedRandIndex(clusters1, clusters2)"
"0","            cat(sprintf(""  %s vs %s: ARI = %.3f\n"", "
"0","                        toupper(purpose1), toupper(purpose2), ari))"
"0","          }"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","}"
"0",""
"0","# EXECUTE THE REVISED EXTRACTION"
"0","cat(""\n=== EXTRACTING ALL CLUSTER TYPES ===\n"")"
"1","
=== EXTRACTING ALL CLUSTER TYPES ===
"
"0","# Extract all cluster types"
"0","all_final_clusters <- extract_all_clusters_from_solutions(enhanced_clustering_results)"
"1","
→ Extracting all cluster types for PISA 2015...
"
"1","  POLICY: 4 clusters using Ward method with unbiased_independent distance (Score: 133.900)
"
"1","  INTERVENTION: 12 clusters using Ward method with unbiased_independent distance (Score: 147.183)
"
"1","  EQUITY: 3 clusters using Ward method with unbiased_independent distance (Score: 1.824)
"
"0","# Summarize all clusters"
"0","summarize_all_clusters(all_final_clusters)"
"1","
=== COMPREHENSIVE CLUSTER ASSIGNMENT SUMMARY ===
"
"1","
--- POLICY CLUSTERS ---
"
"1","PISA 2015:
"
"1","  Solution: Ward.4
"
"1","  Method: Ward linkage
"
"1","  Distance: unbiased_independent
"
"1","  Clusters: 4
"
"1","  Score: 133.900
"
"1","  Students: 1373
"
"1","  Distribution:"
"1"," "
"1","1 = 791, 2 = 428, 3 = 152, 4 = 2"
"1"," "
"1","
"
"1","
"
"1","
--- INTERVENTION CLUSTERS ---
"
"1","PISA 2015:
"
"1","  Solution: Ward.12
"
"1","  Method: Ward linkage
"
"1","  Distance: unbiased_independent
"
"1","  Clusters: 12
"
"1","  Score: 147.183
"
"1","  Students: 1373
"
"1","  Distribution:"
"1"," "
"1","1 = 173, 2 = 97, 3 = 72, 4 = 152, 5 = 61, 6 = 64, 7 = 112, 8 = 182, 9 = 144, 10 = 149, 11 = 165, 12 = 2"
"1"," "
"1","
"
"1","
"
"1","
--- EQUITY CLUSTERS ---
"
"1","PISA 2015:
"
"1","  Solution: Ward.3
"
"1","  Method: Ward linkage
"
"1","  Distance: unbiased_independent
"
"1","  Clusters: 3
"
"1","  Score: 1.824
"
"1","  Students: 1373
"
"1","  Distribution:"
"1"," "
"1","1 = 1219, 2 = 152, 3 = 2"
"1"," "
"1","
"
"1","
"
"0","# Compare across purposes"
"0","compare_cluster_purposes(all_final_clusters)"
"1","
=== CROSS-PURPOSE CLUSTER COMPARISON ===
"
"1","
--- PISA 2015 COMPARISON ---
"
"1","Available solutions: policy, intervention, equity
"
