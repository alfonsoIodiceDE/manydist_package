"0",""
"0","# Variables are organized: Categorical first, then numerical"
"0","#load(""Fifa21NL.RData"") # Load the data"
"0","data(fifa_nl)"
"0","#Xorig<-X<-ddata[,-c(1,2)]"
"0","Xorig<-X<-fifa_nl[,-c(1,2,19:24)] # vars 1 and 2 are a bit useless (too many categories)"
"0","# vars 19:24 interesting but same scale and little variation"
"0","# leaving them out makes the plots a bit smaller. "
"0","# leaving them in doesn't seem to change a lot"
"0",""
"0",""
"0","n<-nrow(X)"
"0","p<-ncol(X)"
"0","K<-10  # Number of clusters in cluster analysis"
"0","nd<-2 # Dimensionality of MDS solution"
"0","X=X[,c(8:1,9:16)]  # Order"
"0","X=X[,-3]  # Remove int rep: 380 have something, 21+7 in other cats"
"0","X=X[,c(1:12,14,13,15)]"
"0","p<-ncol(X)"
"0",""
"0","presets<-c(""HL"",""HLEuclid"",""catdis"", ""gower"",""unbiased_dependent"", ""euclidean_onehot"",""catdissim"")#,""gower2"",""cat dissim"")"
"0",""
"0","mad_importances<-cc_importances<-cc_ranks<-mad_ranks<-matrix(NA,length(presets),p)"
"0","# ASWs<-array(NA,dim=c(length(presets),p+1,K-1))"
"0","#FullClusters<-matrix(NA,n,K-1)"
"0","# ARIs<-array(NA,dim=c(length(presets),p,K-1))"
"0",""
"0","t0<-Sys.time()"
"0","for (pr in 1:length(presets)){"
"0","  # For each preset, first create full distance matrix:"
"0","  if (pr==1){  # This is an HL variant on the manipulated (5 original, 5 discretized) data"
"0","    # Below we specify that we use manhattan, numerical is scaled, categorical uses HL scaling"
"0","    Dall<-mdist(X,preset=""custom"",distance_cont = ""manhattan"",distance_cat = ""HL"", commensurable=FALSE, scaling=""std"")"
"0","  } else if (pr==2){ # HL Euclidean"
"0","    Dall<-mdist(X,"
"0","                distance_cont = ""euclidean"","
"0","                commensurable = FALSE,"
"0","                scaling = ""std"","
"0","                distance_cat = ""HLeucl"")  "
"0","  } else if (pr==3){  # Catdissim"
"0","    Dall<-mdist(X,preset=""custom"",distance_cont = ""manhattan"",distance_cat = ""matching"", scaling=""cat_dis"",commensurable = TRUE)"
"0","#    Dall<-mdist(X,preset=""custom"",distance_cat = #""cat_dis"",commensurable = TRUE)"
"0","  } else if (pr==4){  # Gower"
"0","    Dall<-mdist(X,preset=presets[pr])*ncol(X)"
"0","    #   Dall<-mdist(X,distance_cat = ""matching"","
"0","    #              distance_cont = ""manhattan"","
"0","    #             cat_scaling = ""none"","
"0","    #            cont_scaling = ""range"","
"0","    #           commensurable = FALSE,"
"0","    #           preset = ""custom"")"
"0","  } else { # The other presets are the 3 options"
"0","    Dall<-mdist(X,preset=presets[pr])}"
"0","  "
"0","  MDS_all <- cmdscale(Dall,eig=TRUE, k=nd)  # Full MDS solution"
"0","  # FullClusters<-matrix(NA,n,K-1)            # Full cluster solution"
"0","  # for (k in 2:K){                           # we do this for k in 2:K"
"0","  #   pam.out<-pam(Dall,k)"
"0","  #   ASWs[pr,1,k-1]<-pam.out$silinfo$avg.width  # if we want to compare asw"
"0","  #   FullClusters[,k-1]<-pam.out$clustering     # For each K we get a cluster solution. We compare solutions leaving one-variable out later"
"0","  #   }"
"0","  # "
"0","  # Leave-one-out:   (still same pr)  "
"0","  for (j in 1:p){"
"0","    if (pr==1){"
"0","      Dj<-mdist(X[,-j],preset=""custom"",distance_cont = ""manhattan"",distance_cat = ""HL"",  commensurable=FALSE, scaling=""std"")"
"0","    } else if (pr==2){ # HL 2"
"0","      Dj<-mdist(X[,-j],distance_cont = ""euclidean"","
"0","                commensurable = FALSE,"
"0","                scaling = ""std"","
"0","                distance_cat = ""HLeucl"")  "
"0","    } else if (pr==3){ # Unbiased catdissim"
"0","      Dall<-mdist(X,preset=""custom"",distance_cont = ""manhattan"",distance_cat = ""matching"", scaling=""cat_dis"",commensurable = TRUE)"
"0","   #   Dj<-mdist(X[,-j],preset=""custom"","
"0","   #             distance_cat = ""cat_dis"",commensurable = #TRUE)"
"0","    } else if (pr==4){  # Gower"
"0","      Dj<-mdist(X[,-j],preset=presets[pr])*(ncol(X)-1)"
"0","      #  Dall<-mdist(X[,-j],distance_cat = ""matching"","
"0","      #             distance_cont = ""manhattan"","
"0","      #             cat_scaling = ""none"","
"0","      #            cont_scaling = ""range"","
"0","      #           commensurable = FALSE,"
"0","      #           preset = ""custom"")"
"0","    } else { # the remaining presets"
"0","      Dj<-mdist(X[,-j],preset=presets[pr])}"
"0","    "
"0","    mad_importances[pr,j]<-mean(abs(Dall-Dj))  # Compare MAD"
"0","    MDS_j <- cmdscale(Dj,eig=TRUE, k=nd)       # Needed to compare MDS"
"0","    cc_j<-CongruenceCoeff(MDS_all$points[,1:nd], MDS_j$points[,1:nd])"
"0","    cc_importances[pr,j]<-cc_j                 # The congruence coefficients"
"0","    "
"0","    # for (k in 2:K){        # Now compare for each k, the obtained clusters"
"0","    #   pam.out<-pam(Dj,k)"
"0","    #   ASWs[pr,j+1,k-1]<-pam.out$silinfo$avg.width"
"0","    #   ARIs[pr,j,k-1]<-ARI(FullClusters[,k-1],pam.out$clustering)  # Compare, "
"0","    #                                                             # for each k, all variable clusters with"
"0","    #                                                             # leave-one-out clusters"
"0","    #   "
"0","    # }   # This gives per pr and k, the effect (ARI) of leaving individual variables out on the clustering"
"0","  }"
"0","  "
"0","  # rankings: (Not sure needed)"
"0","  cc_ranks[pr,]<-rank(cc_importances[pr,])"
"0","  # mad_ranks[pr,]<-rank(mad_importances[pr,])"
"0","  "
"0","}"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65 treated as interval scaled"
"0","# (elapsed<-Sys.time()-t0)"
"0",""
"0","variants<-c(""HLa"",""HL"", ""Ustd"", ""G"",""Udep"",""Naive"",""Uind"")"
"0","varreorder<-c(6,2,1,4,7,3,5)  # To get better sequence"
"0","mad_importances<-t(mad_importances)"
"0",""
"0","cc_importances<-sqrt((1-cc_importances^2)) # Change to Alienation"
"0","cc_importances<-t(cc_importances)"
"0","varnames<-rownames(mad_importances) <-rownames(cc_importances)<-names(X)"
"0",""
"0","# "
"0","varnames[7]<-""position"""
"0","#varnames[3]<-""int_repu"""
"0","varnames[1]<-""pref_foot"""
"0","varnames[15]<-""clause_eur"""
"0","varnames[6]<-""club"""
"0","# "
"0","colnames(cc_importances)<-colnames(mad_importances)<-variants"
"0","# Reorder appropriate fields:"
"0","mad_importances<-mad_importances[,varreorder] "
"0","cc_importances<-cc_importances[,varreorder]"
"0","# ARIs<-ARIs[varreorder,,]"
"0","# ASWs<-ASWs[varreorder,,]"
"0","# Create relative importance"
"0","madrel<-sweep(mad_importances,2,colSums(mad_importances),`/`)"
"0","rownames(mad_importances)<-rownames(cc_importances)<-varnames"
