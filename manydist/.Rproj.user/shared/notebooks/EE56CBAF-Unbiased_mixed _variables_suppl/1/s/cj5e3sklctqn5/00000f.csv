"0","reps <- 10"
"0","n<-500 # large is needed for the many (9) categories scenario"
"0","k<-2"
"0","sigma<-0.03  # standard deviation of Xorig variables is "
"0","# is around 0.067"
"0",""
"0","porig<-6 # Number of variables corresponding to true config"
"0","pnnoise<-0 # Number of numerical noise vars"
"0","pcnoise<-0 # Number of categorical noise vars"
"0","pn<-3 # Number of numerical variables underying config"
"0",""
"0","pnum<-pn+pnnoise+pcnoise  # Total number of numerical vars+noise vars (Needed to know which vars to discretize)"
"0","p<-porig+pnnoise+pcnoise # Total number of variables"
"0",""
"0","qoptions<-c(2,3,5,9) # Distribution of the categorical variables corresponding to true config"
"0","pcat<-length(qoptions) # Number of cat variables underlying config"
"0",""
"0","# We consider some variants:"
"0","presets<-c(""custom"",""HL"",""HLEuclid"",""catdis"", ""gower"",""gower_modified"",""unbiased_dependent"", ""euclidean_onehot"",""catdissim"")"
"0","CC<-array(NA,dim=c(reps,length(presets),length(qoptions)))"
"0",""
"0","qr<-rep(NA,reps)"
"0",""
"0","#set.seed(123)"
"0","t0<-Sys.time()"
"0","for (rep in 1:reps){"
"0","set.seed(1234+rep)"
"0","# Generate 2d data:"
"0","T<-cbind(runif(n,-2,2),runif(n,-2,2)) # Random Uniform"
"0",""
"0","SVDT <- svd(T)"
"0","Y<-SVDT$u  # TU is orthonormal. This is the underlying 2d config"
"0",""
"0","R<-NULL"
"0","for (i in 1:porig){"
"0","R<-cbind(R,runif(2,-2,2)) # or uniform. Seems to have little impact"
"0","}"
"0",""
"0","X<-Y%*%R # Inflate/expand the data"
"0",""
"0","Xorig<-as.data.frame(X)"
"0","X<-as.data.frame(Xorig)"
"0","# Add noise (we do this before making categorical; could also be after)"
"0",""
"0","for (i in 1:porig){"
"0","X[,i]<-X[,i]+rnorm(n,0,sigma)"
"0","}"
"0",""
"0","### Or: Add noise columns. Completely random numerical variables"
"0",""
"0","N<-NULL"
"0","if (pnnoise>0){"
"0","for (i in 1:pnnoise){"
"0","N<-cbind(N,rnorm(n))"
"0","}"
"0","}"
"0","if (pcnoise>0){"
"0","qr[rep]<-round(runif(1,3,9))"
"0","for (i in 1:pcnoise){"
"0","Cj<-as.factor(round(runif(n,1.5,qr[rep]+0.5)))"
"0","if (is.null(N)){"
"0","N<-cbind(N,Cj)"
"0","N<-as.factor(N)"
"0","} else {"
"0","N<-cbind.data.frame(N,Cj)}"
"0","}"
"0",""
"0","colnames(N)<-(1:(pnnoise+pcnoise))"
"0","}"
"0",""
"0","if ((pnnoise+pcnoise)>0) {"
"0","Xorig<-cbind.data.frame(N,Xorig)  # The random variables are the first pnoise"
"0","X<-cbind.data.frame(N,X)"
"0","}"
"0",""
"0","# END add noise columns"
"0",""
"0","for (q in 1:length(qoptions)){"
"0","qs<-rep(qoptions[q],p-pnum) # Choice of categories."
"0","# If number to large, we could get"
"0","# empty categories. All cat variables"
"0","# have same number of categories"
"0","pcat<-length(qs)"
"0",""
"0","for (i in (pnum+1):p){ # Create cat variables by simply evenly cutting based on range"
"0","X[,i]<-cut(Xorig[,i],qs[i-pnum])"
"0","}"
"0",""
"0","for (pr in 1:length(presets)){"
"0","# For each preset, first create full distance matrix:"
"0","if (pr==1){  # This is the real, numerical data: We use manhattan on scaled values:"
"0","Dall<-mdist(Xorig,preset=presets[pr],distance_cont = ""manhattan"",commensurable=FALSE, scaling=""std"")"
"0","} else if (pr==2){  # Additive HL, numerical is scaled, categorical uses HL scaling"
"0","Dall<-mdist(X,preset=""custom"",distance_cont = ""manhattan"",distance_cat = ""HL"", commensurable=FALSE, scaling=""std"")"
"0",""
"0","} else if (pr==3){  # HL Euclid "
"0","Dall<-mdist(X,"
"0","distance_cont = ""euclidean"","
"0","commensurable = FALSE,"
"0","scaling = ""std"","
"0","distance_cat = ""HLeucl"")"
"0","} else if (pr==4){  # Cat dissimilarity"
"0","Dall<-mdist(X,preset=""custom"",distance_cont = ""manhattan"",distance_cat = ""matching"", scaling=""cat_dis"",commensurable = TRUE)"
"0","#        Dall<-mdist(X,preset=""catdissim"",commensurable = #TRUE)  "
"0","#      Dall<-mdist(X,preset=""custom"",distance_cat = #""cat_dis"",commensurable = TRUE)"
"0","} else if (pr==5){  # Gower"
"0","Dall<-mdist(X,preset=presets[pr])*ncol(X)"
"0","} else if (pr==6){  # Modified Gower"
"0","  # Check if we have both continuous and categorical variables"
"0","  if(pnum > 0 && (p - pnum) > 0) {"
"0","    # Separate continuous and categorical features"
"0","    continuous_feature <- X[,1:pnum]"
"0","    categorical_feature <- X[,(pnum+1):p]"
"0","    "
"0","    # Get feature importance"
"0","    feature_importance1 = self_adaptive_distance(continuous_feature=continuous_feature, categorical_feature=categorical_feature)"
"0","    feature_importance2 = normalized_MI(continuous_feature=continuous_feature, categorical_feature=categorical_feature)"
"0","    feature_importance <- feature_importance1*feature_importance2"
"0","    feature_importance <- feature_importance/sum(feature_importance)"
"0","    "
"0","    # Calculate distance matrix using modified Gower"
"0","    Dall <- gower.dist.modify(X, var.weights = feature_importance, robcb = ""iqr"")"
"0","  } else {"
"0","    # If only one type of variable, use regular Gower"
"0","    Dall <- gower.dist.modify(X, robcb = ""iqr"")"
"0","  }"
"0","} else { # The other presets are the remaining 3 options"
"0","if (pr==7){ # Catch error if no contvars"
"0","if ((pn+pnnoise)==0) {"
"0","print(""Naive distances error: No numvars"")"
"0","X1<-as.numeric(X[,1])"
"0","X2<-cbind.data.frame(X1,X[,-1])"
"0","Dall<-mdist(X2,preset=presets[pr])"
"0","} else { #pn+pnnoise !=0, pr==7"
"0","Dall<-mdist(X,preset=presets[pr])"
"0","}"
"0","} else {# pr is not 7"
"0","#print(pr)"
"0","Dall<-mdist(X,preset=presets[pr])}"
"0","}"
"0",""
"0","MDS_all <- cmdscale(Dall,eig=TRUE, k=2)"
"0","CC[rep,pr,q]<-CongruenceCoeff(Y,MDS_all$points[,1:2])"
"0","}  # Mix dist variants"
"0",""
"0",""
"0","}  # Number of categories"
"0",""
"0",""
"0","}  # End replications"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 treated as interval scaled"
"2","Warning: binary variable(s) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 treated as interval scaled"
"0","save(CC,file=""boxplot_CC_data.RData"")"
"0",""
