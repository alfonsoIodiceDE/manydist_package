"0","cat(""\n=== ENHANCED CLUSTERING WITH CLUSTERBENCHSTATS ===\n"")"
"1","
=== ENHANCED CLUSTERING WITH CLUSTERBENCHSTATS ===
"
"0","# Load the fpc package for clusterbenchstats"
"0","if (!requireNamespace(""fpc"", quietly = TRUE)) {"
"0","  stop(""fpc package required. Install with: install.packages('fpc')"")"
"0","}"
"0","library(fpc)"
"0",""
"0","# Helper function for educational distance calculation"
"0","# Fixed helper function for educational distance calculation"
"0","# Fixed helper function for educational distance calculation"
"0","calculate_educational_distance_matrix <- function(data, continuous_vars, categorical_vars) {"
"0","  "
"0","  cat(""  → Calculating educational distance matrix...\n"")"
"0","  "
"0","  # Convert to data.frame"
"0","  distance_data <- as.data.frame(data)"
"0","  "
"0","  # Remove any list columns"
"0","  list_cols <- sapply(distance_data, is.list)"
"0","  if (any(list_cols)) {"
"0","    distance_data <- distance_data[, !list_cols, drop = FALSE]"
"0","  }"
"0","  "
"0","  # Convert haven_labelled columns to proper R types"
"0","  for (col_name in names(distance_data)) {"
"0","    col_data <- distance_data[[col_name]]"
"0","    "
"0","    if (inherits(col_data, ""haven_labelled"")) {"
"0","      # Remove labels and convert to numeric or factor"
"0","      if (col_name %in% categorical_vars) {"
"0","        # Convert to factor for categorical variables"
"0","        distance_data[[col_name]] <- as.factor(as.numeric(col_data))"
"0","      } else {"
"0","        # Convert to numeric for continuous variables"
"0","        distance_data[[col_name]] <- as.numeric(col_data)"
"0","      }"
"0","    } else if (col_name %in% categorical_vars && !is.factor(col_data)) {"
"0","      # Ensure categorical variables are factors"
"0","      distance_data[[col_name]] <- as.factor(col_data)"
"0","    }"
"0","  }"
"0","  "
"0","  # Remove any remaining NA columns or problematic columns"
"0","  distance_data <- distance_data[, sapply(distance_data, function(x) !all(is.na(x))), drop = FALSE]"
"0","  "
"0","  cat(sprintf(""    Final data: %d rows × %d columns\n"", nrow(distance_data), ncol(distance_data)))"
"0","  "
"0","  # Use cluster::daisy which handles mixed-type data well"
"0","  library(cluster)"
"0","  dist_matrix <- cluster::daisy(distance_data, metric = ""gower"")"
"0","  "
"0","  return(dist_matrix)"
"0","}"
"0","# Education-specific weight development"
"0","# Education-specific weight development (FIXED)"
"0","develop_educational_weights <- function(available_stats, purpose = ""policy"") {"
"0","  "
"0","  cat(sprintf(""  → Developing %s weights for %d available statistics\n"", purpose, length(available_stats)))"
"0","  "
"0","  # Initialize all weights to a small default value (not zero)"
"0","  weights <- rep(0.1, length(available_stats))"
"0","  names(weights) <- available_stats"
"0","  "
"0","  # Print available statistics for debugging"
"0","  cat(""    Available statistics:"", paste(available_stats, collapse = "", ""), ""\n"")"
"0","  "
"0","  if (purpose == ""policy"") {"
"0","    # Educational Policy Index (Strategic Level)"
"0","    "
"0","    # Look for statistics with flexible matching"
"0","    for (stat in available_stats) {"
"0","      if (grepl(""entropy"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.5  # High entropy weight"
"0","      } else if (grepl(""within|ave\\.within|homogeneity"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.0  # High within-cluster homogeneity"
"0","      } else if (grepl(""boot|stability"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.2  # High stability"
"0","      } else if (grepl(""silhouette|silwidth"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 0.8  # Medium silhouette"
"0","      } else if (grepl(""separation|sep"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 0.6  # Medium separation"
"0","      } else if (grepl(""gamma|pearson"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 0.7  # Structural validity"
"0","      }"
"0","    }"
"0","    "
"0","  } else if (purpose == ""intervention"") {"
"0","    # Educational Intervention Index (Operational Level)"
"0","    "
"0","    for (stat in available_stats) {"
"0","      if (grepl(""boot|stability"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.8  # Highest stability"
"0","      } else if (grepl(""silhouette|silwidth"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.5  # High precision"
"0","      } else if (grepl(""within|ave\\.within|homogeneity"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.3  # High homogeneity"
"0","      } else if (grepl(""entropy"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 0.9  # Actionability"
"0","      } else if (grepl(""separation|sep"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 0.4  # Lower separation priority"
"0","      }"
"0","    }"
"0","    "
"0","  } else if (purpose == ""equity"") {"
"0","    # Educational Equity Index (Social Justice Level)"
"0","    "
"0","    for (stat in available_stats) {"
"0","      if (grepl(""separation|sep|dunn"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.5  # High separation"
"0","      } else if (grepl(""entropy"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.4  # Balanced representation"
"0","      } else if (grepl(""silhouette|silwidth|ch|calinski"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 1.2  # Meaningful differences"
"0","      } else if (grepl(""boot|stability"", stat, ignore.case = TRUE)) {"
"0","        weights[stat] <- 0.8  # Medium stability"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  cat(sprintf(""    Weights assigned - non-default weights: %d\n"", "
"0","              sum(weights != 0.1)))"
"0","  "
"0","  return(weights)"
"0","}"
"0",""
"0","# Clean the data before distance calculation"
"0","clean_clustering_data <- function(data) {"
"0","  # Convert to data.frame"
"0","  clean_data <- as.data.frame(data)"
"0","  "
"0","  # Convert all haven_labelled columns"
"0","  for (col_name in names(clean_data)) {"
"0","    if (inherits(clean_data[[col_name]], ""haven_labelled"")) {"
"0","      clean_data[[col_name]] <- as.numeric(clean_data[[col_name]])"
"0","    }"
"0","  }"
"0","  "
"0","  # Remove any list columns"
"0","  list_cols <- sapply(clean_data, is.list)"
"0","  if (any(list_cols)) {"
"0","    clean_data <- clean_data[, !list_cols, drop = FALSE]"
"0","  }"
"0","  "
"0","  return(clean_data)"
"0","}"
"0",""
"0","# Enhanced clustering function using clusterbenchstats (FIXED)"
"0","perform_educational_clustering_official <- function(cycle_data, cycle_name) {"
"0","  "
"0","  cat(sprintf(""\n=== CLUSTERBENCHSTATS ANALYSIS: PISA %s ===\n"", cycle_name))"
"0","  "
"0","  # Step 1: Prepare clustering data"
"0","  clustering_data <- cycle_data$data[, cycle_data$clustering_vars, with = FALSE]"
"0","  clustering_data <- na.omit(clustering_data)"
"0","  "
"0","  # Clean the data to remove haven_labelled issues"
"0","  clustering_data <- clean_clustering_data(clustering_data)"
"0","  "
"0","  cat(sprintf(""→ Analyzing %d students with %d variables\n"", "
"0","              nrow(clustering_data), ncol(clustering_data)))"
"0","  "
"0","  # Step 2: Calculate distance matrix"
"0","  educational_distance_matrix <- calculate_educational_distance_matrix("
"0","    clustering_data, "
"0","    continuous_vars = cycle_data$continuous_vars,"
"0","    categorical_vars = cycle_data$categorical_vars"
"0","  )"
"0","  "
"0","  # Step 3: Configure clustering methods (using CBI interface)"
"0","  clustermethod <- c(""pamkCBI"", ""hclustCBI"", ""hclustCBI"", ""hclustCBI"")"
"0","  "
"0","  # Step 4: Configure method parameters"
"0","  clustermethodpars <- list()"
"0","  clustermethodpars[[1]] <- list()  # PAM defaults"
"0","  clustermethodpars[[2]] <- list(method = ""ward.D2"")  # Ward linkage"
"0","  clustermethodpars[[3]] <- list(method = ""average"")  # Average linkage  "
"0","  clustermethodpars[[4]] <- list(method = ""complete"") # Complete linkage"
"0","  "
"0","  # Step 5: Method identification"
"0","  methodnames <- c(""PAM"", ""Ward"", ""Average"", ""Complete"")"
"0","  "
"0","  # Step 6: Distance method specification"
"0","  distmethod <- rep(TRUE, length(clustermethod))  # All methods use distances"
"0","  ncinput <- rep(TRUE, length(clustermethod))     # All methods need k as input"
"0","  "
"0","  # Step 7: Define cluster ranges (REDUCED for stability)"
"0","  G_macro <- 3:6   # Reduced range for stability"
"0","  G_micro <- 8:12  # Reduced range for stability"
"0","  "
"0","  # Step 8: Run macro-level analysis (WITH REDUCED BOOTSTRAP)"
"0","  cat(""→ Running macro-level clustering (Educational Policy Focus)...\n"")"
"0","  cbs_macro <- clusterbenchstats("
"0","    data = educational_distance_matrix,"
"0","    G = G_macro,"
"0","    diss = TRUE,"
"0","    scaling = FALSE,"
"0","    clustermethod = clustermethod,"
"0","    methodnames = methodnames,"
"0","    distmethod = distmethod,"
"0","    ncinput = ncinput,"
"0","    clustermethodpars = clustermethodpars,"
"0","    npstats = FALSE,"
"0","    useboot = FALSE,  # DISABLE BOOTSTRAP FOR NOW"
"0","    trace = FALSE,"
"0","    useallmethods = TRUE,"
"0","    useallg = FALSE,"
"0","    nnruns = 10,      # Reduced random runs"
"0","    kmruns = 10,      # Reduced random runs"
"0","    fnruns = 10,      # Reduced random runs"
"0","    avenruns = 10     # Reduced random runs"
"0","  )"
"0","  "
"0","  # Step 9: Run micro-level analysis (WITH REDUCED BOOTSTRAP)"
"0","  cat(""→ Running micro-level clustering (Educational Intervention Focus)...\n"")"
"0","  cbs_micro <- clusterbenchstats("
"0","    data = educational_distance_matrix,"
"0","    G = G_micro,"
"0","    diss = TRUE,"
"0","    scaling = FALSE,"
"0","    clustermethod = clustermethod,"
"0","    methodnames = methodnames,"
"0","    distmethod = distmethod,"
"0","    ncinput = ncinput,"
"0","    clustermethodpars = clustermethodpars,"
"0","    npstats = FALSE,"
"0","    useboot = FALSE,  # DISABLE BOOTSTRAP FOR NOW"
"0","    trace = FALSE,"
"0","    useallmethods = TRUE,"
"0","    useallg = FALSE,"
"0","    nnruns = 10,      # Reduced random runs"
"0","    kmruns = 10,      # Reduced random runs"
"0","    fnruns = 10,      # Reduced random runs"
"0","    avenruns = 10     # Reduced random runs"
"0","  )"
"0","  "
"0","  # Step 10: Develop education-specific weights"
"0","  cat(""→ Computing education-specific composite indices...\n"")"
"0","  "
"0","  # Get available statistics"
"0","  available_stats <- colnames(cbs_macro$sstat$statistics)"
"0","  "
"0","  # Develop education-specific weights for different purposes"
"0","  policy_weights <- develop_educational_weights(available_stats, ""policy"")"
"0","  intervention_weights <- develop_educational_weights(available_stats, ""intervention"") "
"0","  equity_weights <- develop_educational_weights(available_stats, ""equity"")"
"0","  "
"0","  # Apply weights to get optimal solutions"
"0","  policy_optimal <- print(cbs_macro$sstat, aggregate=TRUE, weights=policy_weights)"
"0","  intervention_optimal <- print(cbs_micro$sstat, aggregate=TRUE, weights=intervention_weights)"
"0","  equity_optimal <- print(cbs_macro$sstat, aggregate=TRUE, weights=equity_weights)"
"0","  "
"0","  return(list("
"0","    cycle = cycle_name,"
"0","    data_info = list("
"0","      n_students = nrow(clustering_data),"
"0","      n_variables = ncol(clustering_data),"
"0","      continuous_vars = cycle_data$continuous_vars,"
"0","      categorical_vars = cycle_data$categorical_vars"
"0","    ),"
"0","    macro_analysis = cbs_macro,"
"0","    micro_analysis = cbs_micro,"
"0","    optimal_solutions = list("
"0","      policy = policy_optimal,"
"0","      intervention = intervention_optimal,"
"0","      equity = equity_optimal"
"0","    ),"
"0","    weights_used = list("
"0","      policy = policy_weights,"
"0","      intervention = intervention_weights,"
"0","      equity = equity_weights"
"0","    ),"
"0","    distance_matrix = educational_distance_matrix"
"0","  ))"
"0","}"
"0","cat(""✓ Enhanced clustering functions with clusterbenchstats loaded\n"")"
"1","✓ Enhanced clustering functions with clusterbenchstats loaded
"
