"0","cat(""\n=== EDUCATIONAL INSIGHTS BY CYCLE ===\n"")"
"1","
=== EDUCATIONAL INSIGHTS BY CYCLE ===
"
"0","generate_cycle_educational_insights <- function(cycle_name, cycle_optimal_result, "
"0","                                                cycle_data, clustering_result) {"
"0","  "
"0","  cat(sprintf(""\n--- Educational Insights: PISA %s ---\n"", cycle_name))"
"0","  "
"0","  if (is.null(cycle_optimal_result$macro$best)) {"
"0","    cat(""No optimal macro clustering found for this cycle.\n"")"
"0","    return(NULL)"
"0","  }"
"0","  "
"0","  # Extract optimal clustering information"
"0","  best_macro <- cycle_optimal_result$macro$best"
"0","  "
"0","  cat(""DEBUG: Distance method:"", best_macro$distance_method, ""\n"")"
"0","  cat(""DEBUG: Clustering method:"", best_macro$clustering_method, ""\n"") "
"0","  cat(""DEBUG: K:"", best_macro$k, ""\n"")"
"0","  "
"0","  # CORRECTED: Navigate through distance_method -> clustering_method -> k"
"0","  tryCatch({"
"0","    if (cycle_name %in% names(clustering_result) && "
"0","        ""macro"" %in% names(clustering_result[[cycle_name]]) &&"
"0","        best_macro$distance_method %in% names(clustering_result[[cycle_name]]$macro)) {"
"0","      "
"0","      # Navigate to clustering method level"
"0","      distance_results <- clustering_result[[cycle_name]]$macro[[best_macro$distance_method]]"
"0","      "
"0","      if (best_macro$clustering_method %in% names(distance_results)) {"
"0","        cat(""DEBUG: Found clustering method:"", best_macro$clustering_method, ""\n"")"
"0","        "
"0","        # Navigate to the specific clustering method"
"0","        method_results <- distance_results[[best_macro$clustering_method]]"
"0","        "
"0","        cat(""DEBUG: Available k values for"", best_macro$clustering_method, "":\n"")"
"0","        print(names(method_results))"
"0","        "
"0","        # Look for k results - try different formats"
"0","        possible_k_names <- c("
"0","          paste0(""k_"", best_macro$k),"
"0","          paste0(""K_"", best_macro$k),"
"0","          paste0(""k"", best_macro$k),"
"0","          as.character(best_macro$k)"
"0","        )"
"0","        "
"0","        cluster_labels <- NULL"
"0","        k_result <- NULL"
"0","        "
"0","        for (k_name in possible_k_names) {"
"0","          if (k_name %in% names(method_results)) {"
"0","            cat(""DEBUG: Found k format:"", k_name, ""\n"")"
"0","            k_result <- method_results[[k_name]]"
"0","            "
"0","            cat(""DEBUG: K result structure:\n"")"
"0","            print(str(k_result, max.level = 1))"
"0","            "
"0","            # Look for cluster labels in different possible locations"
"0","            if (is.list(k_result)) {"
"0","              if (""labels"" %in% names(k_result)) {"
"0","                cluster_labels <- k_result$labels"
"0","                cat(""DEBUG: Found labels in k_result$labels\n"")"
"0","              } else if (""cluster"" %in% names(k_result)) {"
"0","                cluster_labels <- k_result$cluster"
"0","                cat(""DEBUG: Found labels in k_result$cluster\n"")"
"0","              } else if (""clustering"" %in% names(k_result)) {"
"0","                cluster_labels <- k_result$clustering"
"0","                cat(""DEBUG: Found labels in k_result$clustering\n"")"
"0","              } else if (""assignment"" %in% names(k_result)) {"
"0","                cluster_labels <- k_result$assignment"
"0","                cat(""DEBUG: Found labels in k_result$assignment\n"")"
"0","              }"
"0","            } else if (is.vector(k_result)) {"
"0","              cluster_labels <- k_result"
"0","              cat(""DEBUG: K result is a vector - using directly\n"")"
"0","            }"
"0","            "
"0","            if (!is.null(cluster_labels) && length(cluster_labels) > 0) {"
"0","              cat(""DEBUG: Successfully extracted"", length(cluster_labels), ""cluster labels\n"")"
"0","              cat(""DEBUG: Label range:"", min(cluster_labels), ""to"", max(cluster_labels), ""\n"")"
"0","              break"
"0","            }"
"0","          }"
"0","        }"
"0","        "
"0","        if (is.null(cluster_labels)) {"
"0","          cat(""DEBUG: Could not find cluster labels with standard k formats\n"")"
"0","          cat(""DEBUG: Available k names in method results:\n"")"
"0","          print(names(method_results))"
"0","          "
"0","          # Try to examine the first available k result to understand structure"
"0","          if (length(names(method_results)) > 0) {"
"0","            first_k <- names(method_results)[1]"
"0","            cat(""DEBUG: Examining structure of"", first_k, "":\n"")"
"0","            print(str(method_results[[first_k]], max.level = 2))"
"0","          }"
"0","        }"
"0","      } else {"
"0","        cat(""DEBUG: Clustering method"", best_macro$clustering_method, ""not found\n"")"
"0","        cat(""DEBUG: Available clustering methods:\n"")"
"0","        print(names(distance_results))"
"0","      }"
"0","    }"
"0","    "
"0","  }, error = function(e) {"
"0","    cat(""ERROR in cluster extraction:"", e$message, ""\n"")"
"0","    cluster_labels <- NULL"
"0","  })"
"0","  "
"0","  # Check if cluster_labels was successfully extracted"
"0","  if (is.null(cluster_labels) || length(cluster_labels) == 0) {"
"0","    cat(""ERROR: Could not extract cluster labels for"", cycle_name, ""\n"")"
"0","    return(NULL)"
"0","  }"
"0","  "
"0","  # Add cluster labels to data"
"0","  analysis_data <- copy(cycle_data$data)"
"0","  "
"0","  # Check dimensions match"
"0","  cat(""DEBUG: analysis_data rows:"", nrow(analysis_data), ""\n"")"
"0","  cat(""DEBUG: cluster_labels length:"", length(cluster_labels), ""\n"")"
"0","  "
"0","  if (nrow(analysis_data) != length(cluster_labels)) {"
"0","    cat(""ERROR: Dimension mismatch between data ("", nrow(analysis_data), "") and cluster labels ("", length(cluster_labels), "")\n"")"
"0","    return(NULL)"
"0","  }"
"0","  "
"0","  analysis_data[, CLUSTER := cluster_labels]"
"0","  "
"0","  # Continue with rest of analysis..."
"0","  available_chars <- intersect("
"0","    c(""MATH_AVG"", ""READ_AVG"", ""SCIE_AVG"", ""ESCS"", ""BELONG"", ""TEACHSUP"", "
"0","      ""ANXMAT"", ""PERSEV"", ""LIFESAT""),"
"0","    names(analysis_data)"
"0","  )"
"0","  "
"0","  if (length(available_chars) > 0) {"
"0","    "
"0","    cluster_profiles <- analysis_data[, c("
"0","      lapply(.SD, function(x) round(mean(x, na.rm = TRUE), 3)),"
"0","      list("
"0","        n_students = .N,"
"0","        resilience_rate = round(mean(RESILIENT, na.rm = TRUE), 3)"
"0","      )"
"0","    ), .SDcols = available_chars, by = CLUSTER]"
"0","    "
"0","    cat(sprintf(""\nCluster Profiles for PISA %s (K=%d):\n"", cycle_name, best_macro$k))"
"0","    print(cluster_profiles)"
"0","    "
"0","    # Identify high and low resilience clusters"
"0","    high_resilience_clusters <- cluster_profiles[resilience_rate > 0.3]$CLUSTER"
"0","    low_resilience_clusters <- cluster_profiles[resilience_rate < 0.1]$CLUSTER"
"0","    "
"0","    cat(sprintf(""\nResilience Patterns:\n""))"
"0","    cat(sprintf(""• High resilience clusters (>30%%): %s\n"", "
"0","                ifelse(length(high_resilience_clusters) > 0, "
"0","                       paste(high_resilience_clusters, collapse = "", ""), ""None"")))"
"0","    cat(sprintf(""• Low resilience clusters (<10%%): %s\n"","
"0","                ifelse(length(low_resilience_clusters) > 0,"
"0","                       paste(low_resilience_clusters, collapse = "", ""), ""None"")))"
"0","    "
"0","    return(cluster_profiles)"
"0","  }"
"0","  "
"0","  return(NULL)"
"0","}"
"0","# Generate insights for each cycle"
"0","cycle_educational_insights <- list()"
"0",""
"0","for (cycle_name in names(cycle_optimal_results)) {"
"0","  cycle_educational_insights[[cycle_name]] <- generate_cycle_educational_insights("
"0","    cycle_name,"
"0","    cycle_optimal_results[[cycle_name]],"
"0","    cycle_prepared_data[[cycle_name]],"
"0","    all_cycle_clustering_results  # ✅ This is the correct object"
"0","  )"
"0","}"
"1","
--- Educational Insights: PISA 2015 ---
"
"1","DEBUG: Distance method:"
"1"," "
"1","unbiased_independent"
"1"," "
"1","
"
"1","DEBUG: Clustering method:"
"1"," "
"1","ward"
"1"," "
"1","
"
"1","DEBUG: K:"
"1"," "
"1","8"
"1"," "
"1","
"
"1","DEBUG: Found clustering method:"
"1"," "
"1","ward"
"1"," "
"1","
"
"1","DEBUG: Available k values for"
"1"," "
"1","ward"
"1"," "
"1",":
"
"1","[1]"
"1"," ""k_3"""
"1"," ""k_4"""
"1"," ""k_5"""
"1"," ""k_6"""
"1"," ""k_7"""
"1"," ""k_8"""
"1","
"
"1","DEBUG: Found k format:"
"1"," "
"1","k_8"
"1"," "
"1","
"
"1","DEBUG: K result structure:
"
"1","List"
"1",""
"1"," of "
"1",""
"1","5"
"1",""
"1","
"
"1"," "
"1",""
"1","$ "
"1",""
"1","k                "
"1",""
"1",":"
"1"," int "
"1",""
"1","8"
"1",""
"1","
"
"1"," "
"1",""
"1","$ "
"1",""
"1","labels           "
"1",""
"1",":"
"1"," Named int [1:1373] "
"1",""
"1","1 2 1 1 1 1 1 1 1 1"
"1",""
"1"," ..."
"1",""
"1","
"
"1","  .."
"1",""
"1","- attr(*, ""names"")="
"1"," chr [1:1373] "
"1",""
"1","""1"" ""2"" ""3"" ""4"""
"1",""
"1"," ..."
"1",""
"1","
"
"1"," "
"1",""
"1","$ "
"1",""
"1","method           "
"1",""
"1",":"
"1"," chr "
"1",""
"1","""ward"""
"1",""
"1","
"
"1"," "
"1",""
"1","$ "
"1",""
"1","n_clusters_actual"
"1",""
"1",":"
"1"," int "
"1",""
"1","8"
"1",""
"1","
"
"1"," "
"1",""
"1","$ "
"1",""
"1","cycle            "
"1",""
"1",":"
"1"," chr "
"1",""
"1","""2015"""
"1",""
"1","
"
"1","NULL
"
"1","DEBUG: Found labels in k_result$labels
"
"1","DEBUG: Successfully extracted"
"1"," "
"1","1373"
"1"," "
"1","cluster labels
"
"1","DEBUG: Label range:"
"1"," "
"1","1"
"1"," "
"1","to"
"1"," "
"1","8"
"1"," "
"1","
"
"1","DEBUG: analysis_data rows:"
"1"," "
"1","1373"
"1"," "
"1","
"
"1","DEBUG: cluster_labels length:"
"1"," "
"1","1373"
"1"," "
"1","
"
"1","
Cluster Profiles for PISA 2015 (K=8):
"
