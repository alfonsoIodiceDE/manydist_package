"0","cat(""\n=== CYCLE-SPECIFIC DATA PREPARATION WITH MICE IMPUTATION ===\n"")"
"1","
=== CYCLE-SPECIFIC DATA PREPARATION WITH MICE IMPUTATION ===
"
"0","# Enhanced data preparation function with MICE imputation"
"0","prepare_cycle_clustering_data <- function(cycle_data, cycle_vars, cycle_name, "
"0","                                          missing_threshold = 0.3, mice_iterations = 5) {"
"0","  "
"0","  cat(sprintf(""→ Preparing clustering dataset for PISA %s...\n"", cycle_name))"
"0","  "
"0","  # Essential columns"
"0","  essential_cols <- c(""RESILIENT"", ""CYCLE"", ""W_FSTUWT"", ""CNTSTUID"", ""CNTSCHID"")"
"0","  available_essential <- intersect(essential_cols, names(cycle_data))"
"0","  "
"0","  # Combine variables"
"0","  all_vars <- c(cycle_vars, available_essential)"
"0","  clustering_data <- cycle_data[, all_vars, with = FALSE]"
"0","  "
"0","  # Step 1: Analyze missing value patterns"
"0","  cat(""→ Analyzing missing value patterns...\n"")"
"0","  "
"0","  missing_summary <- clustering_data[, lapply(.SD, function(x) sum(is.na(x))/length(x)), "
"0","                                     .SDcols = cycle_vars]"
"0","  "
"0","  # Step 2: Filter variables based on missing threshold (30%)"
"0","  good_vars <- names(missing_summary)[missing_summary <= missing_threshold]"
"0","  dropped_vars <- names(missing_summary)[missing_summary > missing_threshold]"
"0","  "
"0","  if (length(dropped_vars) > 0) {"
"0","    cat(sprintf(""⚠ Dropped %d variables with >%.0f%% missingness: %s\n"", "
"0","                length(dropped_vars), missing_threshold * 100,"
"0","                paste(head(dropped_vars, 3), collapse = "", "")))"
"0","    if (length(dropped_vars) > 3) {"
"0","      cat(sprintf(""  ... and %d more variables\n"", length(dropped_vars) - 3))"
"0","    }"
"0","  }"
"0","  "
"0","  # Step 3: Keep only good variables plus essential columns"
"0","  final_vars <- c(good_vars, available_essential)"
"0","  clustering_data <- clustering_data[, final_vars, with = FALSE]"
"0","  "
"0","  # Step 4: Identify variable types before imputation"
"0","  categorical_vars <- c(""ST004D01T"", ""GRADE"", ""IMMIG"", ""REPEAT"", ""LANGN"", ""SCHLTYPE"")"
"0","  available_categorical <- intersect(categorical_vars, good_vars)"
"0","  continuous_vars <- setdiff(good_vars, available_categorical)"
"0","  "
"0","  # Convert categorical variables to factors"
"0","  for (var in available_categorical) {"
"0","    if (var %in% names(clustering_data)) {"
"0","      clustering_data[[var]] <- as.factor(clustering_data[[var]])"
"0","    }"
"0","  }"
"0","  "
"0","  # Step 5: Check if imputation is needed"
"0","  remaining_missing <- clustering_data[, lapply(.SD, function(x) sum(is.na(x))), "
"0","                                       .SDcols = good_vars]"
"0","  total_missing <- sum(unlist(remaining_missing))"
"0","  "
"0","  if (total_missing > 0) {"
"0","    cat(sprintf(""→ Performing MICE imputation for %d remaining missing values...\n"", total_missing))"
"0","    "
"0","    # Prepare data for MICE (only clustering variables)"
"0","    mice_data <- clustering_data[, good_vars, with = FALSE]"
"0","    "
"0","    # Convert to data.frame for mice"
"0","    mice_df <- as.data.frame(mice_data)"
"0","    "
"0","    # Configure MICE methods"
"0","    mice_methods <- mice::make.method(mice_df)"
"0","    "
"0","    # Set appropriate methods for different variable types"
"0","    for (var in names(mice_df)) {"
"0","      if (is.factor(mice_df[[var]])) {"
"0","        mice_methods[var] <- ""polyreg""  # Multinomial logistic regression for factors"
"0","      } else if (is.numeric(mice_df[[var]])) {"
"0","        mice_methods[var] <- ""pmm""      # Predictive mean matching for continuous"
"0","      }"
"0","    }"
"0","    "
"0","    # Perform MICE imputation with error handling"
"0","    tryCatch({"
"0","      # Suppress mice output for cleaner console"
"0","      mice_result <- mice::mice(mice_df, "
"0","                                m = mice_iterations,           # Number of imputations"
"0","                                method = mice_methods,"
"0","                                printFlag = FALSE,             # Suppress progress output"
"0","                                seed = 42)                     # Reproducibility"
"0","      "
"0","      # Complete the data using the first imputation"
"0","      completed_mice_df <- mice::complete(mice_result, 1)"
"0","      "
"0","      # Convert back to data.table"
"0","      completed_mice_dt <- setDT(completed_mice_df)"
"0","      "
"0","      # Replace the clustering variables in original data"
"0","      for (var in good_vars) {"
"0","        clustering_data[[var]] <- completed_mice_dt[[var]]"
"0","      }"
"0","      "
"0","      cat(sprintf(""✓ MICE imputation completed successfully\n""))"
"0","      "
"0","      # Verify no missing values remain"
"0","      remaining_after_mice <- clustering_data[, lapply(.SD, function(x) sum(is.na(x))), "
"0","                                              .SDcols = good_vars]"
"0","      total_remaining <- sum(unlist(remaining_after_mice))"
"0","      "
"0","      if (total_remaining > 0) {"
"0","        cat(sprintf(""⚠ Warning: %d missing values still remain after MICE\n"", total_remaining))"
"0","        "
"0","        # Fallback: Simple imputation for any remaining missings"
"0","        for (var in good_vars) {"
"0","          if (any(is.na(clustering_data[[var]]))) {"
"0","            if (is.factor(clustering_data[[var]])) {"
"0","              # Mode imputation for categorical"
"0","              mode_val <- names(sort(table(clustering_data[[var]]), decreasing = TRUE))[1]"
"0","              clustering_data[is.na(get(var)), (var) := mode_val]"
"0","            } else {"
"0","              # Median imputation for continuous"
"0","              median_val <- median(clustering_data[[var]], na.rm = TRUE)"
"0","              clustering_data[is.na(get(var)), (var) := median_val]"
"0","            }"
"0","          }"
"0","        }"
"0","        cat(""✓ Fallback imputation applied for remaining missing values\n"")"
"0","      }"
"0","      "
"0","    }, error = function(e) {"
"0","      cat(sprintf(""⚠ MICE imputation failed: %s\n"", e$message))"
"0","      cat(""→ Falling back to simple imputation methods...\n"")"
"0","      "
"0","      # Fallback: Simple imputation"
"0","      for (var in good_vars) {"
"0","        if (any(is.na(clustering_data[[var]]))) {"
"0","          if (is.factor(clustering_data[[var]])) {"
"0","            # Mode imputation for categorical"
"0","            mode_val <- names(sort(table(clustering_data[[var]]), decreasing = TRUE))[1]"
"0","            clustering_data[is.na(get(var)), (var) := mode_val]"
"0","          } else {"
"0","            # Median imputation for continuous"
"0","            median_val <- median(clustering_data[[var]], na.rm = TRUE)"
"0","            clustering_data[is.na(get(var)), (var) := median_val]"
"0","          }"
"0","        }"
"0","      }"
"0","      cat(""✓ Fallback imputation completed\n"")"
"0","    })"
"0","    "
"0","  } else {"
"0","    cat(""✓ No missing values detected - no imputation needed\n"")"
"0","  }"
"0","  "
"0","  # Step 6: Remove cases with excessive missingness in essential variables"
"0","  initial_n <- nrow(clustering_data)"
"0","  "
"0","  # Check for missing essential variables"
"0","  essential_missing <- rowSums(is.na(clustering_data[, available_essential, with = FALSE]))"
"0","  clustering_data <- clustering_data[essential_missing == 0]"
"0","  "
"0","  final_n <- nrow(clustering_data)"
"0","  "
"0","  if (final_n < initial_n) {"
"0","    cat(sprintf(""⚠ Removed %d cases with missing essential variables\n"", initial_n - final_n))"
"0","  }"
"0","  "
"0","  cat(sprintf(""✓ Final dataset: %d students (%.1f%% retention)\n"", "
"0","              final_n, 100 * final_n / initial_n))"
"0","  "
"0","  cat(sprintf(""✓ Variable types: %d continuous, %d categorical\n"", "
"0","              length(continuous_vars), length(available_categorical)))"
"0","  "
"0","  # Step 7: Final data quality check"
"0","  final_missing_check <- clustering_data[, lapply(.SD, function(x) sum(is.na(x))), "
"0","                                         .SDcols = good_vars]"
"0","  total_final_missing <- sum(unlist(final_missing_check))"
"0","  "
"0","  if (total_final_missing == 0) {"
"0","    cat(""✓ Data quality check passed: No missing values in clustering variables\n"")"
"0","  } else {"
"0","    cat(sprintf(""⚠ Warning: %d missing values still present\n"", total_final_missing))"
"0","  }"
"0","  "
"0","  return(list("
"0","    data = clustering_data,"
"0","    clustering_vars = good_vars,"
"0","    categorical_vars = available_categorical,"
"0","    continuous_vars = continuous_vars,"
"0","    cycle = cycle_name,"
"0","    imputation_summary = list("
"0","      original_missing = total_missing,"
"0","      final_missing = total_final_missing,"
"0","      variables_dropped = dropped_vars,"
"0","      variables_kept = good_vars,"
"0","      mice_successful = total_missing > 0 && total_final_missing == 0"
"0","    )"
"0","  ))"
"0","}"
"0",""
"0","# Prepare clustering data for each cycle with MICE imputation"
"0","cycle_prepared_data <- list()"
"0",""
"0","for (cycle_name in names(processed_list)) {"
"0","  if (!is.null(processed_list[[cycle_name]])) {"
"0","    "
"0","    cycle_vars <- cycle_variable_analysis[[cycle_name]]$clustering_vars"
"0","    "
"0","    cycle_prepared_data[[cycle_name]] <- prepare_cycle_clustering_data("
"0","      processed_list[[cycle_name]], "
"0","      cycle_vars, "
"0","      cycle_name,"
"0","      missing_threshold = 0.3,  # Drop variables with >30% missing"
"0","      mice_iterations = 5       # Number of MICE iterations"
"0","    )"
"0","  }"
"0","}"
"1","→ Preparing clustering dataset for PISA 2015...
"
"1","→ Analyzing missing value patterns...
"
"1","→ Performing MICE imputation for 528 remaining missing values...
"
"1","⚠ MICE imputation failed: `t.haven_labelled()` not supported.
"
"1","→ Falling back to simple imputation methods...
"
"1","✓ Fallback imputation completed
"
"1","✓ Final dataset: 1373 students (100.0% retention)
"
"1","✓ Variable types: 15 continuous, 6 categorical
"
"1","✓ Data quality check passed: No missing values in clustering variables
"
"1","→ Preparing clustering dataset for PISA 2018...
"
"1","→ Analyzing missing value patterns...
"
"1","→ Performing MICE imputation for 1995 remaining missing values...
"
"1","⚠ MICE imputation failed: `t.haven_labelled()` not supported.
"
"1","→ Falling back to simple imputation methods...
"
"1","✓ Fallback imputation completed
"
"1","✓ Final dataset: 1593 students (100.0% retention)
"
"1","✓ Variable types: 28 continuous, 6 categorical
"
"1","✓ Data quality check passed: No missing values in clustering variables
"
"1","→ Preparing clustering dataset for PISA 2022...
"
"1","→ Analyzing missing value patterns...
"
"1","⚠ Dropped 2 variables with >30% missingness: ICTRES, LIFESAT
"
"1","→ Performing MICE imputation for 821 remaining missing values...
"
"1","⚠ MICE imputation failed: `t.haven_labelled()` not supported.
"
"1","→ Falling back to simple imputation methods...
"
"1","✓ Fallback imputation completed
"
"1","✓ Final dataset: 1579 students (100.0% retention)
"
"1","✓ Variable types: 18 continuous, 6 categorical
"
"1","✓ Data quality check passed: No missing values in clustering variables
"
"0","cat(""\n✓ Data preparation with MICE imputation completed for all cycles\n"")"
"1","
✓ Data preparation with MICE imputation completed for all cycles
"
"0","# Enhanced Summary with Imputation Details"
"0","cat(""\n=== CYCLE-SPECIFIC DATASET SUMMARY WITH IMPUTATION DETAILS ===\n"")"
"1","
=== CYCLE-SPECIFIC DATASET SUMMARY WITH IMPUTATION DETAILS ===
"
"0","for (cycle_name in names(cycle_prepared_data)) {"
"0","  data_info <- cycle_prepared_data[[cycle_name]]"
"0","  imputation_info <- data_info$imputation_summary"
"0","  "
"0","  cat(sprintf(""\nPISA %s:\n"", cycle_name))"
"0","  cat(sprintf(""  Students: %d\n"", nrow(data_info$data)))"
"0","  cat(sprintf(""  Variables: %d total (%d continuous, %d categorical)\n"","
"0","              length(data_info$clustering_vars),"
"0","              length(data_info$continuous_vars),"
"0","              length(data_info$categorical_vars)))"
"0","  cat(sprintf(""  Variables dropped (>30%% missing): %d\n"", length(imputation_info$variables_dropped)))"
"0","  "
"0","  if (imputation_info$original_missing > 0) {"
"0","    cat(sprintf(""  MICE imputation: %d missing values → %d missing values\n"","
"0","                imputation_info$original_missing, imputation_info$final_missing))"
"0","    cat(sprintf(""  Imputation success: %s\n"", "
"0","                ifelse(imputation_info$mice_successful, ""✓ Complete"", ""⚠ Partial"")))"
"0","  } else {"
"0","    cat(""  Imputation: Not needed (no missing values)\n"")"
"0","  }"
"0","}"
"1","
PISA 2015:
"
"1","  Students: 1373
"
"1","  Variables: 21 total (15 continuous, 6 categorical)
"
"1","  Variables dropped (>30% missing): 0
"
"1","  MICE imputation: 528 missing values → 0 missing values
"
"1","  Imputation success: ✓ Complete
"
"1","
PISA 2018:
"
"1","  Students: 1593
"
"1","  Variables: 34 total (28 continuous, 6 categorical)
"
"1","  Variables dropped (>30% missing): 0
"
"1","  MICE imputation: 1995 missing values → 0 missing values
"
"1","  Imputation success: ✓ Complete
"
"1","
PISA 2022:
"
"1","  Students: 1579
"
"1","  Variables: 24 total (18 continuous, 6 categorical)
"
"1","  Variables dropped (>30% missing): 2
"
"1","  MICE imputation: 821 missing values → 0 missing values
"
"1","  Imputation success: ✓ Complete
"
"0","# Optional: Display variables dropped due to high missingness"
"0","cat(""\n=== VARIABLES DROPPED DUE TO HIGH MISSINGNESS (>30%) ===\n"")"
"1","
=== VARIABLES DROPPED DUE TO HIGH MISSINGNESS (>30%) ===
"
"0","for (cycle_name in names(cycle_prepared_data)) {"
"0","  dropped_vars <- cycle_prepared_data[[cycle_name]]$imputation_summary$variables_dropped"
"0","  if (length(dropped_vars) > 0) {"
"0","    cat(sprintf(""\nPISA %s dropped variables (%d):\n"", cycle_name, length(dropped_vars)))"
"0","    for (i in 1:min(10, length(dropped_vars))) {  # Show max 10 variables"
"0","      cat(sprintf(""  - %s\n"", dropped_vars[i]))"
"0","    }"
"0","    if (length(dropped_vars) > 10) {"
"0","      cat(sprintf(""  ... and %d more variables\n"", length(dropped_vars) - 10))"
"0","    }"
"0","  } else {"
"0","    cat(sprintf(""PISA %s: No variables dropped\n"", cycle_name))"
"0","  }"
"0","}"
"1","PISA 2015: No variables dropped
"
"1","PISA 2018: No variables dropped
"
"1","
PISA 2022 dropped variables (2):
"
"1","  - ICTRES
"
"1","  - LIFESAT
"
"0","cat(""\n✓ Enhanced cycle-specific data preparation with MICE imputation completed\n"")"
"1","
✓ Enhanced cycle-specific data preparation with MICE imputation completed
"
