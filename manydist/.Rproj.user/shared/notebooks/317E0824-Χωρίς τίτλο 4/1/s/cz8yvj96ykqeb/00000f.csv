"0","# Comprehensive cluster profiling function - ENHANCED with all variables"
"0","profile_clusters_comprehensive <- function(enhanced_data_with_clusters, cycle_name, purpose = ""policy"") {"
"0","  "
"0","  cat(sprintf(""\n=== CLUSTER PROFILING: PISA %s %s CLUSTERS ===\n"", cycle_name, toupper(purpose)))"
"0","  "
"0","  cycle_data <- enhanced_data_with_clusters[[cycle_name]]"
"0","  cluster_col <- paste0(""CLUSTER_"", toupper(purpose))"
"0","  "
"0","  if (!cluster_col %in% names(cycle_data$data)) {"
"0","    cat(""No clusters found for this purpose\n"")"
"0","    return(NULL)"
"0","  }"
"0","  "
"0","  data_with_clusters <- cycle_data$data"
"0","  clustering_vars <- cycle_data$clustering_vars"
"0","  categorical_vars <- cycle_data$categorical_vars"
"0","  continuous_vars <- cycle_data$continuous_vars"
"0","  "
"0","  # Get all available variables (clustering + essential)"
"0","  all_available_vars <- c(clustering_vars, cycle_data$essential_vars)"
"0","  "
"0","  clusters <- data_with_clusters[[cluster_col]]"
"0","  n_clusters <- length(unique(clusters))"
"0","  "
"0","  # Verify RESILIENT availability"
"0","  resilient_available <- ""RESILIENT"" %in% names(data_with_clusters)"
"0","  if (resilient_available) {"
"0","    cat(""✓ RESILIENT variable available for external validation\n"")"
"0","  } else {"
"0","    cat(""⚠ RESILIENT variable not found\n"")"
"0","  }"
"0","  "
"0","  cat(sprintf(""\nFound %d clusters. Profiling ALL clustering variables:\n"", n_clusters))"
"0","  cat(sprintf(""- Continuous variables: %d\n"", length(continuous_vars)))"
"0","  cat(sprintf(""- Categorical variables: %d\n"", length(categorical_vars)))"
"0","  cat(sprintf(""- Total clustering variables: %d\n\n"", length(clustering_vars)))"
"0","  "
"0","  cluster_profiles <- list()"
"0","  "
"0","  for (cluster_id in sort(unique(clusters))) {"
"0","    "
"0","    cluster_mask <- clusters == cluster_id"
"0","    cluster_data <- data_with_clusters[cluster_mask, ]"
"0","    n_students <- nrow(cluster_data)"
"0","    "
"0","    cat(sprintf(""=== CLUSTER %d (n=%d, %.1f%%) ===\n"", "
"0","                cluster_id, n_students, 100*n_students/nrow(data_with_clusters)))"
"0","    "
"0","    profile <- list("
"0","      cluster_id = cluster_id,"
"0","      size = n_students,"
"0","      percentage = 100*n_students/nrow(data_with_clusters)"
"0","    )"
"0","    "
"0","    # RESILIENT VALIDATION (External variable)"
"0","    if (resilient_available) {"
"0","      resilient_count <- sum(cluster_data$RESILIENT, na.rm = TRUE)"
"0","      resilient_rate <- mean(cluster_data$RESILIENT, na.rm = TRUE) * 100"
"0","      "
"0","      cat(sprintf(""RESILIENCE VALIDATION (External):\n""))"
"0","      cat(sprintf(""  Resilient students: %d/%d (%.1f%%)\n"", "
"0","                  resilient_count, n_students, resilient_rate))"
"0","      "
"0","      profile$resilience_external <- list("
"0","        count = resilient_count,"
"0","        rate = resilient_rate"
"0","      )"
"0","      cat(""\n"")"
"0","    }"
"0","    "
"0","    # CONTINUOUS VARIABLES PROFILE"
"0","    if (length(continuous_vars) > 0) {"
"0","      cat(""CONTINUOUS VARIABLES:\n"")"
"0","      "
"0","      continuous_stats <- list()"
"0","      "
"0","      for (var in continuous_vars) {"
"0","        if (var %in% names(cluster_data)) {"
"0","          var_data <- cluster_data[[var]]"
"0","          var_mean <- mean(var_data, na.rm = TRUE)"
"0","          var_sd <- sd(var_data, na.rm = TRUE)"
"0","          var_median <- median(var_data, na.rm = TRUE)"
"0","          var_min <- min(var_data, na.rm = TRUE)"
"0","          var_max <- max(var_data, na.rm = TRUE)"
"0","          var_missing <- sum(is.na(var_data))"
"0","          "
"0","          cat(sprintf(""  %s: M=%.2f, SD=%.2f, Mdn=%.2f [%.2f, %.2f], NA=%d\n"", "
"0","                      var, var_mean, var_sd, var_median, var_min, var_max, var_missing))"
"0","          "
"0","          continuous_stats[[var]] <- list("
"0","            mean = var_mean,"
"0","            sd = var_sd,"
"0","            median = var_median,"
"0","            min = var_min,"
"0","            max = var_max,"
"0","            missing = var_missing"
"0","          )"
"0","        }"
"0","      }"
"0","      "
"0","      profile$continuous <- continuous_stats"
"0","      cat(""\n"")"
"0","    }"
"0","    "
"0","    # CATEGORICAL VARIABLES PROFILE"
"0","    if (length(categorical_vars) > 0) {"
"0","      cat(""CATEGORICAL VARIABLES:\n"")"
"0","      "
"0","      categorical_stats <- list()"
"0","      "
"0","      for (var in categorical_vars) {"
"0","        if (var %in% names(cluster_data)) {"
"0","          var_data <- cluster_data[[var]]"
"0","          var_table <- table(var_data, useNA = ""ifany"")"
"0","          var_props <- prop.table(var_table) * 100"
"0","          "
"0","          # Most frequent category"
"0","          mode_category <- names(var_table)[which.max(var_table)]"
"0","          mode_count <- max(var_table)"
"0","          mode_pct <- max(var_props)"
"0","          "
"0","          cat(sprintf(""  %s: Mode='%s' (%d, %.1f%%)\n"", "
"0","                      var, mode_category, mode_count, mode_pct))"
"0","          "
"0","          # Show all categories if not too many"
"0","          if (length(var_table) <= 5) {"
"0","            for (i in 1:length(var_table)) {"
"0","              cat(sprintf(""    %s: %d (%.1f%%)\n"", "
"0","                          names(var_table)[i], var_table[i], var_props[i]))"
"0","            }"
"0","          } else {"
"0","            cat(sprintf(""    [%d categories total - showing mode only]\n"", length(var_table)))"
"0","          }"
"0","          "
"0","          categorical_stats[[var]] <- list("
"0","            mode = mode_category,"
"0","            mode_count = mode_count,"
"0","            mode_percentage = mode_pct,"
"0","            full_table = var_table,"
"0","            proportions = var_props"
"0","          )"
"0","        }"
"0","      }"
"0","      "
"0","      profile$categorical <- categorical_stats"
"0","      cat(""\n"")"
"0","    }"
"0","    "
"0","    # ACHIEVEMENT FOCUS "
"0","    achievement_vars <- intersect(c(""MATH_AVG"", ""READ_AVG"", ""SCIE_AVG""), continuous_vars)"
"0","    if (length(achievement_vars) > 0) {"
"0","      cat(""ACHIEVEMENT SUMMARY (2.0x weighted in clustering):\n"")"
"0","      for (var in achievement_vars) {"
"0","        if (var %in% names(cluster_data)) {"
"0","          avg <- mean(cluster_data[[var]], na.rm = TRUE)"
"0","          # Check against PISA proficiency levels"
"0","          if (grepl(""MATH"", var)) {"
"0","            level <- if (avg >= 482) ""Level 3+"" else if (avg >= 420) ""Level 2"" else ""Below Level 2"""
"0","          } else {"
"0","            level <- if (avg >= 480) ""Level 3+"" else if (avg >= 420) ""Level 2"" else ""Below Level 2"""
"0","          }"
"0","          cat(sprintf(""  %s: %.1f (%s)\n"", var, avg, level))"
"0","        }"
"0","      }"
"0","      cat(""\n"")"
"0","    }"
"0","    "
"0","    # MOTIVATION SUMMARY (if available)"
"0","    motivation_vars <- intersect(c(""ANXMAT"", ""ANXTEST"", ""MATHEFF"", ""SCIEEFF"", ""JOYSCIE"", ""TEACHSUP""), continuous_vars)"
"0","    if (length(motivation_vars) > 0) {"
"0","      cat(""MOTIVATION SUMMARY (1.5x weighted in clustering):\n"")"
"0","      motivation_means <- sapply(motivation_vars, function(var) {"
"0","        if (var %in% names(cluster_data)) {"
"0","          avg <- mean(cluster_data[[var]], na.rm = TRUE)"
"0","          cat(sprintf(""  %s: %.2f\n"", var, avg))"
"0","          return(avg)"
"0","        }"
"0","        return(NA)"
"0","      })"
"0","      "
"0","      # Overall motivation index"
"0","      overall_motivation <- mean(motivation_means, na.rm = TRUE)"
"0","      cat(sprintf(""  Overall motivation index: %.2f\n"", overall_motivation))"
"0","      profile$motivation_index <- overall_motivation"
"0","      cat(""\n"")"
"0","    }"
"0","    "
"0","    cluster_profiles[[as.character(cluster_id)]] <- profile"
"0","  }"
"0","  "
"0","  # CROSS-CLUSTER COMPARISON"
"0","  cat(""=== CROSS-CLUSTER COMPARISON ===\n"")"
"0","  "
"0","  if (resilient_available) {"
"0","    cat(""Resilience rates across clusters:\n"")"
"0","    for (cid in names(cluster_profiles)) {"
"0","      profile <- cluster_profiles[[cid]]"
"0","      if (!is.null(profile$resilience_external)) {"
"0","        cat(sprintf(""  Cluster %s: %.1f%% resilient (%d students)\n"", "
"0","                    cid, profile$resilience_external$rate, profile$size))"
"0","      }"
"0","    }"
"0","    cat(""\n"")"
"0","  }"
"0","  "
"0","  # Show which variables differentiate clusters most"
"0","  cat(""Variables with largest between-cluster differences:\n"")"
"0","  "
"0","  if (length(continuous_vars) > 0) {"
"0","    max_ranges <- sapply(continuous_vars, function(var) {"
"0","      if (var %in% names(data_with_clusters)) {"
"0","        cluster_means <- tapply(data_with_clusters[[var]], clusters, mean, na.rm = TRUE)"
"0","        max(cluster_means, na.rm = TRUE) - min(cluster_means, na.rm = TRUE)"
"0","      } else {"
"0","        0"
"0","      }"
"0","    })"
"0","    "
"0","    # Show top differentiating variables"
"0","    top_diff_vars <- head(sort(max_ranges, decreasing = TRUE), 5)"
"0","    for (var in names(top_diff_vars)) {"
"0","      cat(sprintf(""  %s: range = %.2f\n"", var, top_diff_vars[[var]]))"
"0","    }"
"0","  }"
"0","  "
"0","  return(cluster_profiles)"
"0","}"
"0",""
"0","# Profile all cluster types with enhanced output"
"0","for (cycle_name in names(enhanced_data_with_clusters)) {"
"0","  for (purpose in c(""policy"", ""intervention"", ""equity"")) {"
"0","    tryCatch({"
"0","      profiles <- profile_clusters_comprehensive(enhanced_data_with_clusters, cycle_name, purpose)"
"0","    }, error = function(e) {"
"0","      cat(sprintf(""Error profiling %s %s: %s\n"", cycle_name, purpose, e$message))"
"0","    })"
"0","  }"
"0","}"
"1","
=== CLUSTER PROFILING: PISA 2015 POLICY CLUSTERS ===
"
"1","No clusters found for this purpose
"
"1","
=== CLUSTER PROFILING: PISA 2015 INTERVENTION CLUSTERS ===
"
"1","No clusters found for this purpose
"
"1","
=== CLUSTER PROFILING: PISA 2015 EQUITY CLUSTERS ===
"
"1","No clusters found for this purpose
"
"0","cat(""\n✓ Comprehensive cluster profiling completed with all variables!\n"")"
"1","
✓ Comprehensive cluster profiling completed with all variables!
"
"0","cat(""✓ RESILIENT validation included for external verification\n"")"
"1","✓ RESILIENT validation included for external verification
"
"0","cat(""✓ All continuous and categorical clustering variables profiled\n"")"
"1","✓ All continuous and categorical clustering variables profiled
"
"0","cat(""✓ Cross-cluster comparisons provided\n"")"
"1","✓ Cross-cluster comparisons provided
"
