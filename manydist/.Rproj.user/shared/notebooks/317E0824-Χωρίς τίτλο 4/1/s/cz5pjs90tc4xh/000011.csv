"0","cat(""\n=== CLUSTERING WITH VARIABLE WEIGHTING ===\n"")"
"1","
=== CLUSTERING WITH VARIABLE WEIGHTING ===
"
"0","clean_clustering_data <- function(data) {"
"0","  clean_data <- as.data.frame(data)"
"0","  for (col_name in names(clean_data)) {"
"0","    if (inherits(clean_data[[col_name]], ""haven_labelled"")) {"
"0","      clean_data[[col_name]] <- as.numeric(clean_data[[col_name]])"
"0","    }"
"0","  }"
"0","  list_cols <- sapply(clean_data, is.list)"
"0","  if (any(list_cols)) {"
"0","    clean_data <- clean_data[, !list_cols, drop = FALSE]"
"0","  }"
"0","  return(clean_data)"
"0","}"
"0",""
"0","calculate_weighted_distances <- function(cycle_data_info, distance_methods) {"
"0","  cycle_name <- cycle_data_info$cycle"
"0","  cat(sprintf(""\n→ Calculating weighted distance matrices for PISA %s...\n"", cycle_name))"
"0","  "
"0","  distance_data <- cycle_data_info$data[, cycle_data_info$clustering_vars, with = FALSE]"
"0","  distance_data <- na.omit(distance_data)"
"0","  distance_data <- clean_clustering_data(distance_data)"
"0","  "
"0","  for (var in names(distance_data)) {"
"0","    if (any(is.na(distance_data[[var]]))) {"
"0","      if (is.factor(distance_data[[var]])) {"
"0","        mode_val <- names(sort(table(distance_data[[var]]), decreasing = TRUE))[1]"
"0","        distance_data[is.na(distance_data[[var]]), var] <- mode_val"
"0","      } else {"
"0","        median_val <- median(distance_data[[var]], na.rm = TRUE)"
"0","        distance_data[is.na(distance_data[[var]]), var] <- median_val"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  continuous_vars <- cycle_data_info$continuous_vars"
"0","  "
"0","  # Apply intervention-focused variable weighting"
"0","  var_weights <- rep(1.0, ncol(distance_data))"
"0","  names(var_weights) <- names(distance_data)"
"0","  "
"0","  # SES variables (2.0x - important context)"
"0","  ses_vars <- intersect(names(distance_data), c(""ESCS"", ""HISEI"", ""HOMEPOS"", ""ICTRES"", ""WEALTH""))"
"0","  var_weights[ses_vars] <- 2.0"
"0","  "
"0","  # Psychological/Motivation variables (1.8x - key for intervention)"
"0","  psych_vars <- intersect(names(distance_data),"
"0","                          c(""ANXMAT"", ""ANXTEST"", ""MATHEFF"", ""SCIEEFF"", ""JOYSCIE"","
"0","                            ""WORKMAST"", ""MASTGOAL"", ""GFOFAIL"", ""COMPETE"", ""METASUM"", "
"0","                            ""ADAPTIVITY"", ""GCSELFEFF"", ""PERSEVAGR"", ""GROSAGR"", ""STRESAGR""))"
"0","  var_weights[psych_vars] <- 1.8"
"0","  "
"0","  # Social Support variables (1.5x)"
"0","  social_vars <- intersect(names(distance_data), c(""BELONG"", ""EMOSUPS"", ""FAMSUP"", ""RELATST"", ""TEACHSUP""))"
"0","  var_weights[social_vars] <- 1.5"
"0","  "
"0","  # Learning Behavior variables (1.3x)"
"0","  learning_vars <- intersect(names(distance_data),"
"0","                             c(""STUDYHMW"", ""EXERPRAC"", ""WORKPAY"", ""WORKHOME"", ""SKIPPING"", ""PERFEED"", ""DISCLIM""))"
"0","  var_weights[learning_vars] <- 1.3"
"0","  "
"0","  cat(sprintf(""  Variable weights applied:\n""))"
"0","  cat(sprintf(""    SES (2.0x): %d variables\n"", length(ses_vars)))"
"0","  cat(sprintf(""    Psychology/Motivation (1.8x): %d variables\n"", length(psych_vars)))"
"0","  cat(sprintf(""    Social Support (1.5x): %d variables\n"", length(social_vars)))"
"0","  cat(sprintf(""    Learning Behavior (1.3x): %d variables\n"", length(learning_vars)))"
"0","  "
"0","  # Apply weights to continuous variables"
"0","  weighted_distance_data <- distance_data"
"0","  for (var in names(var_weights)) {"
"0","    if (var %in% continuous_vars) {"
"0","      weighted_distance_data[[var]] <- distance_data[[var]] * var_weights[var]"
"0","    }"
"0","  }"
"0","  "
"0","  cycle_distance_matrices <- list()"
"0","  "
"0","  for (method_name in names(distance_methods)) {"
"0","    cat(sprintf(""  → %s with variable weighting..."", method_name))"
"0","    method_info <- distance_methods[[method_name]]"
"0","    "
"0","    tryCatch({"
"0","      start_time <- Sys.time()"
"0","      dist_matrix <- do.call(manydist::mdist, c(list(x = weighted_distance_data), method_info$params))"
"0","      end_time <- Sys.time()"
"0","      calc_time <- as.numeric(difftime(end_time, start_time, units = ""secs""))"
"0","      "
"0","      cycle_distance_matrices[[method_name]] <- list("
"0","        matrix = as.dist(dist_matrix),"
"0","        method = method_info$name,"
"0","        description = method_info$description,"
"0","        calculation_time = calc_time,"
"0","        variable_weights = var_weights,"
"0","        weighted_data_applied = TRUE"
"0","      )"
"0","      "
"0","      cat(sprintf("" %.1fs ✓\n"", calc_time))"
"0","      "
"0","    }, error = function(e) {"
"0","      cat(sprintf("" ERROR: %s\n"", e$message))"
"0","    })"
"0","  }"
"0","  "
"0","  return(cycle_distance_matrices)"
"0","}"
"0",""
"0","extract_clusterbenchstats_matrix <- function(cbs_result) {"
"0","  if (is.null(cbs_result$sstat)) {"
"0","    if (!is.null(cbs_result$qstat)) {"
"0","      stat_component <- cbs_result$qstat"
"0","    } else {"
"0","      return(NULL)"
"0","    }"
"0","  } else {"
"0","    stat_component <- cbs_result$sstat"
"0","  }"
"0","  "
"0","  methods <- stat_component$name"
"0","  if (is.null(methods)) methods <- stat_component$method"
"0","  G_values <- stat_component$minG:stat_component$maxG"
"0","  stat_names <- stat_component$statistics"
"0","  "
"0","  n_rows <- length(methods) * length(G_values)"
"0","  stats_matrix <- matrix(NA, nrow = n_rows, ncol = length(stat_names))"
"0","  colnames(stats_matrix) <- stat_names"
"0","  "
"0","  row_names <- character(n_rows)"
"0","  row_idx <- 1"
"0","  for (method in methods) {"
"0","    for (g in G_values) {"
"0","      row_names[row_idx] <- paste(method, g, sep = ""."")"
"0","      row_idx <- row_idx + 1"
"0","    }"
"0","  }"
"0","  rownames(stats_matrix) <- row_names"
"0","  "
"0","  row_idx <- 1"
"0","  for (method_idx in 1:length(methods)) {"
"0","    method_data <- stat_component[[method_idx]]"
"0","    "
"0","    if (is.list(method_data)) {"
"0","      for (g_idx in seq_along(G_values)) {"
"0","        pos <- g_idx + 1"
"0","        if (pos <= length(method_data)) {"
"0","          g_stats <- method_data[[pos]]"
"0","          "
"0","          if (is.list(g_stats) && length(g_stats) > 0) {"
"0","            for (col_idx in 1:length(stat_names)) {"
"0","              stat_name <- stat_names[col_idx]"
"0","              if (stat_name %in% names(g_stats)) {"
"0","                value <- g_stats[[stat_name]]"
"0","                if (is.numeric(value) && length(value) == 1 && is.finite(value)) {"
"0","                  stats_matrix[row_idx, col_idx] <- value"
"0","                }"
"0","              }"
"0","            }"
"0","          }"
"0","        }"
"0","        row_idx <- row_idx + 1"
"0","      }"
"0","    } else {"
"0","      row_idx <- row_idx + length(G_values)"
"0","    }"
"0","  }"
"0","  "
"0","  valid_rows <- rowSums(!is.na(stats_matrix)) > 0"
"0","  if (sum(valid_rows) == 0) {"
"0","    return(NULL)"
"0","  }"
"0","  "
"0","  return(stats_matrix[valid_rows, , drop = FALSE])"
"0","}"
"0",""
"0","develop_intervention_weights <- function(available_stats) {"
"0","  weights <- rep(0.1, length(available_stats))"
"0","  names(weights) <- available_stats"
"0","  "
"0","  for (stat in available_stats) {"
"0","    if (grepl(""boot|stability"", stat, ignore.case = TRUE)) {"
"0","      weights[stat] <- 1.8"
"0","    } else if (grepl(""silhouette|silwidth|asw"", stat, ignore.case = TRUE)) {"
"0","      weights[stat] <- 1.5"
"0","    } else if (grepl(""within|ave\\.within|homogeneity"", stat, ignore.case = TRUE)) {"
"0","      weights[stat] <- 1.3"
"0","    } else if (grepl(""entropy"", stat, ignore.case = TRUE)) {"
"0","      weights[stat] <- 1.4"
"0","    } else if (grepl(""separation|sep|minsep"", stat, ignore.case = TRUE)) {"
"0","      weights[stat] <- 0.4"
"0","    }"
"0","  }"
"0","  "
"0","  return(weights)"
"0","}"
"0",""
"0","find_best_intervention_solution <- function(distance_results, cycle_name) {"
"0","  best_solution <- NULL"
"0","  best_score <- -Inf"
"0","  "
"0","  for (dist_method in names(distance_results)) {"
"0","    dist_result <- distance_results[[dist_method]]"
"0","    "
"0","    if (!is.null(dist_result$analysis)) {"
"0","      stats_matrix <- extract_clusterbenchstats_matrix(dist_result$analysis)"
"0","      "
"0","      if (!is.null(stats_matrix)) {"
"0","        available_cols <- colnames(stats_matrix)"
"0","        weights <- develop_intervention_weights(available_cols)"
"0","        "
"0","        scores <- apply(stats_matrix, 1, function(row) {"
"0","          if (all(is.na(row))) return(NA)"
"0","          row[!is.finite(row)] <- NA"
"0","          valid_indices <- !is.na(row)"
"0","          if (sum(valid_indices) == 0) return(NA)"
"0","          weighted.mean(row[valid_indices], weights[valid_indices], na.rm = TRUE)"
"0","        })"
"0","        "
"0","        if (length(scores) > 0 && any(!is.na(scores))) {"
"0","          best_idx <- which.max(scores)"
"0","          best_name <- names(scores)[best_idx]"
"0","          "
"0","          if (scores[best_idx] > best_score) {"
"0","            best_score <- scores[best_idx]"
"0","            best_solution <- list("
"0","              solution = best_name,"
"0","              score = best_score,"
"0","              distance_method = dist_method,"
"0","              statistics = stats_matrix[best_name, ]"
"0","            )"
"0","          }"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  return(best_solution)"
"0","}"
"0",""
"0","perform_intervention_clustering <- function(cycle_data, cycle_name) {"
"0","  cat(sprintf(""\n=== INTERVENTION CLUSTERING: PISA %s ===\n"", cycle_name))"
"0","  "
"0","  cycle_distances <- calculate_weighted_distances(cycle_data, DISTANCE_METHODS)"
"0","  "
"0","  clustermethod <- c(""disthclustCBI"", ""pamkCBI"")"
"0","  clustermethodpars <- list()"
"0","  clustermethodpars[[1]] <- list(method = ""ward.D2"")"
"0","  clustermethodpars[[2]] <- list(diss = TRUE, usepam = TRUE)"
"0","  methodnames <- c(""Ward"", ""PAM"")"
"0","  distmethod <- rep(TRUE, length(clustermethod))"
"0","  ncinput <- rep(TRUE, length(clustermethod))"
"0","  "
"0","  G_range <- CLUSTERING_PARAMS$k_min:CLUSTERING_PARAMS$k_max"
"0","  "
"0","  distance_results <- list()"
"0","  "
"0","  for (dist_method_name in names(cycle_distances)) {"
"0","    if (!is.null(cycle_distances[[dist_method_name]])) {"
"0","      cat(sprintf(""\n→ Running clustering with %s distance...\n"", dist_method_name))"
"0","      "
"0","      dist_matrix <- cycle_distances[[dist_method_name]]$matrix"
"0","      "
"0","      tryCatch({"
"0","        cbs_result <- clusterbenchstats("
"0","          data = dist_matrix,"
"0","          G = G_range,"
"0","          diss = TRUE,"
"0","          scaling = FALSE,"
"0","          clustermethod = clustermethod,"
"0","          methodnames = methodnames,"
"0","          distmethod = distmethod,"
"0","          ncinput = ncinput,"
"0","          clustermethodpars = clustermethodpars,"
"0","          npstats = FALSE,"
"0","          useboot = FALSE,"
"0","          trace = FALSE,"
"0","          useallmethods = FALSE,"
"0","          useallg = FALSE,"
"0","          nnruns = 1,"
"0","          kmruns = 0,"
"0","          fnruns = 1,"
"0","          avenruns = 1"
"0","        )"
"0","        "
"0","        distance_results[[dist_method_name]] <- list("
"0","          analysis = cbs_result,"
"0","          distance_info = cycle_distances[[dist_method_name]]"
"0","        )"
"0","        "
"0","        cat(""    ✓ Clustering completed\n"")"
"0","        "
"0","      }, error = function(e) {"
"0","        cat(sprintf(""    ✗ Clustering failed: %s\n"", e$message))"
"0","      })"
"0","    }"
"0","  }"
"0","  "
"0","  best_solution <- find_best_intervention_solution(distance_results, cycle_name)"
"0","  "
"0","  return(list("
"0","    cycle = cycle_name,"
"0","    distance_results = distance_results,"
"0","    optimal_solution = best_solution,"
"0","    distance_matrices = cycle_distances"
"0","  ))"
"0","}"
"0",""
"0","enhanced_clustering_results <- list()"
"0","for (cycle_name in names(cycle_prepared_data)) {"
"0","  if (!is.null(cycle_prepared_data[[cycle_name]])) {"
"0","    enhanced_clustering_results[[cycle_name]] <- perform_intervention_clustering("
"0","      cycle_prepared_data[[cycle_name]], cycle_name"
"0","    )"
"0","  }"
"0","}"
"1","
=== INTERVENTION CLUSTERING: PISA 2015 ===
"
"1","
→ Calculating weighted distance matrices for PISA 2015...
"
"1","  Variable weights applied:
"
"1","    SES (2.0x): 4 variables
"
"1","    Psychology/Motivation (1.8x): 2 variables
"
"1","    Social Support (1.5x): 3 variables
"
"1","    Learning Behavior (1.3x): 0 variables
"
"1","  → gower_baseline with variable weighting..."
"1"," 1.5s ✓
"
"1","
→ Running clustering with gower_baseline distance...
"
"1","    ✓ Clustering completed
"
"1","
=== INTERVENTION CLUSTERING: PISA 2018 ===
"
"1","
→ Calculating weighted distance matrices for PISA 2018...
"
"1","  Variable weights applied:
"
"1","    SES (2.0x): 5 variables
"
"1","    Psychology/Motivation (1.8x): 7 variables
"
"1","    Social Support (1.5x): 3 variables
"
"1","    Learning Behavior (1.3x): 0 variables
"
"1","  → gower_baseline with variable weighting..."
"1"," 2.6s ✓
"
"1","
→ Running clustering with gower_baseline distance...
"
"1","    ✓ Clustering completed
"
"1","
=== INTERVENTION CLUSTERING: PISA 2022 ===
"
"1","
→ Calculating weighted distance matrices for PISA 2022...
"
"1","  Variable weights applied:
"
"1","    SES (2.0x): 3 variables
"
"1","    Psychology/Motivation (1.8x): 5 variables
"
"1","    Social Support (1.5x): 4 variables
"
"1","    Learning Behavior (1.3x): 5 variables
"
"1","  → gower_baseline with variable weighting..."
"1"," 3.2s ✓
"
"1","
→ Running clustering with gower_baseline distance...
"
"1","    ✓ Clustering completed
"
"0","cat(""\n✓ Enhanced clustering analysis completed for all cycles\n"")"
"1","
✓ Enhanced clustering analysis completed for all cycles
"
