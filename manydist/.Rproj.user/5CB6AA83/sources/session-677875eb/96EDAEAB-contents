# Compare on real data clustering performance:

# Which variants? 

# HL, Naive (both not in framework; non-additive),
# Gower, Commensurable:indep (basically: Gower commensurable), 
# Commensurable:sd, Commensurable:catdissim, 
# Commensurable:tvd, Commensurable:KL,
# Commensurable:dep (pca&tvd), Commensurable:dep (pca &KL)
# Ghashti, Moussavi, Liu (???). Of these, I know that Ghashti 
# can be done using the kdml package. For some data, finding the bandwidths 
# can take a very long time.

# We apply pam to all methods and calculate ARI 

# We can make parallelplot of ARIs, with lines for data sets: 
# Cleveland (x2), obesitas, australian credit, dermatology.

# Not sure about results. (Also: scales may differ: fit for some data is 
# much poorer than for others).

library(manydist)
library(cluster)
library(aricode)
library(clustrd)
library(GGally)
library(viridis)
library(hrbrthemes)

presoptions<-c("gower","unbiased_dependent","euclidean_onehot","catdissim")

datasets<-c("cleveland5.Rdata")#,"cleveland2.Rdata","dermatology.Rdata",
          #  "obesitas.Rdata", "australian.Rdata","automobile.Rdata",
          #  "contraceptive.Rdata","flags.Rdata","lympho.Rdata",
          #  "hepatitis.Rdata","ionosphere.Rdata","abalone.Rdata")#,"thyroid.Rdata")

datanames<-c("heart5","heart2","dermatology","obesitas",
             "credit","automobile","contraceptive","flags",
             "lympho","hepatitis","ionosphere","abalone")#,"thyroid")

numvariants<-7  # This needs to be set manually depending on how many different 
# methods/variants are included

ARIs<-matrix(NA,numvariants,length(datasets))

for (d in 1:length(datasets)){
  
  load(datasets[d])
  
  arisc<-NULL
  for (i in 1:length(presoptions)){  # Get Di's for all presets
    # then do PAM and check correspondence with labels
    # using ARI
    
    Di<-mdist(df[,-t], preset=presoptions[i])
    D<-as.dist(Di)
    if (any(is.nan(D))==FALSE){
    pam.out<-pam(D,k)
    # print(table(pam.out$clustering,df[,t])) # print "confusion" matrix
    arisc<-rbind(arisc,ARI(pam.out$clustering,df[,t]))} else {
      arisc<-rbind(arisc,0)
    }
  }
  rownames(arisc)<-presoptions
  
  # The other indep options:
  options<-c("st_dev", 
             "matching","HL","HLeucl")#, "iof", "of") 
  
  # ERRORs for: "HL","HLa", "catdissim"):
  # Error in `as_mapper()`:
  # ! Can't convert `.f`, `NULL`, to a function.
  # Run `rlang::last_trace()` to see where the error occurred.
  
  for (i in 1:length(options)){
    Di<-mdist(df[,-t], distance_cat=options[i], commensurable = TRUE)
    D<-as.dist(Di)
    if (any(is.nan(D))==FALSE){
    pam.out<-pam(D,k)
    # print(table(pam.out$clustering,df[,t])) # print "confusion" matrix
    arisc<-rbind(arisc,ARI(pam.out$clustering,df[,t])) } else {
    arisc<-rbind(arisc,0)
      }
  }
  rownames(arisc)[(length(presoptions)+1):(length(presoptions)+length(options))]<-options
  
  # The other dep options:
  # Supervised gives error: Error in t(Z) %*% Z_y : requires numeric/complex matrix/vector arguments
  # Di<-mdist(x=df[,-t], validate_x=NULL, response=df[,t],distance_cat="supervised", commensurable = TRUE)
  
  Di<-mdist(df[,-t], distance_cat="tot_var_dist", scaling="pc_scores", commensurable = TRUE)
  
  D<-as.dist(Di)
  if (any(is.nan(D))==FALSE){
  pam.out<-pam(D,k)
  # print(table(pam.out$clustering,df[,t])) # print "confusion" matrix
  arisc<-rbind(arisc,ARI(pam.out$clustering,df[,t]))} else {
    arisc<-rbind(arisc,0)
  }
  rownames(arisc)[length(arisc)]<-"tvd&pc"
  
  # ClusCA?
  #clus.out<-cluspcamix(df[,-t],nclus=k,ndim=(k-1))
  #arisc<-rbind(arisc,ARI(clus.out$cluster,df[,t]))
  #rownames(arisc)[length(arisc)]<-"clusca"
  
  ARIs[,d]<-arisc
  rownames(ARIs)<-rownames(arisc)
}


plotdata<-as.data.frame(t(ARIs))
plotdata<-cbind.data.frame(plotdata,datanames)
colnames(plotdata)[numvariants+1]<-"data"
#sel<-c(2,5:9,1,3,4,10)
sel<-c(1,3,2,4:8)
plotdata<-plotdata[,sel]




p1<-ggparcoord(plotdata,
               columns = c(1:(length(plotdata)-1)), groupColumn = length(plotdata), 
               scale = "globalminmax",
               title = "ARIs",
) + theme_ipsum() 
print(p1)

plotdata<-as.data.frame(t(plotdata[,1:numvariants]))
plotdata<-cbind.data.frame(plotdata,rownames(plotdata))
unbiased<-c("B","B","U","U","U","U","U")
plotdata<-cbind.data.frame(plotdata,as.factor(unbiased))
colnames(plotdata)<-c(datanames,"method","unbiased")
#plotdata<-plotdata[-nrow(plotdata),]
#colnames(plotdata)[length(plotdata)]<-"method"

maxs<-apply(plotdata[,1:length(datasets)],2,max)

p2<-ggparcoord(plotdata,
               columns = c(1:length(datasets)), groupColumn = 11, 
               scale = "globalminmax",
               order=order(maxs),
               title = "ARIs",
) + theme_ipsum() 
print(p2)



