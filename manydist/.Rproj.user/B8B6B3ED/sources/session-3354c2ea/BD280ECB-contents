# Load required libraries
library(ca)

# CA-raw function (original asymmetric version)
ca_raw <- function(data_matrix) {
  # Convert to matrix and ensure it's numeric
  X <- as.matrix(data_matrix)
  X[is.na(X)] <- 0  # Replace any NAs with 0
  
  # Check for valid input
  if(any(X < 0)) stop("Data matrix must contain non-negative values")
  if(sum(X) == 0) stop("Data matrix cannot be all zeros")
  
  # Get dimensions
  I <- nrow(X)  # number of sites/rows
  J <- ncol(X)  # number of species/columns
  
  # Calculate grand total
  n <- sum(X)
  
  # Create P matrix (proportions)
  P <- X / n
  
  # Calculate column totals (species masses)
  c <- colSums(P)
  
  # Remove columns with zero totals
  non_zero_cols <- c > 0
  if(sum(non_zero_cols) < J) {
    P <- P[, non_zero_cols, drop = FALSE]
    c <- c[non_zero_cols]
    J <- sum(non_zero_cols)
    warning(paste("Removed", sum(!non_zero_cols), "columns with zero totals"))
  }
  
  # For CA-raw, use uniform row masses
  uniform_mass <- 1/I
  ones_vector <- rep(1, I)
  
  # Create uniform profile
  uniform_profile <- matrix(rep(c, each = I), nrow = I, ncol = J) / I
  
  # Center with respect to uniform profile
  P_centered <- P - uniform_profile
  
  # Apply chi-square transformation
  # Pre-multiply by sqrt(I) and post-multiply by Dc^(-1/2)
  Dc_inv_sqrt <- diag(1/sqrt(c))
  S_star <- sqrt(I) * P_centered %*% Dc_inv_sqrt
  
  # Perform SVD
  svd_result <- svd(S_star)
  
  # Check for valid SVD results
  if(any(!is.finite(svd_result$d))) {
    stop("SVD produced non-finite singular values")
  }
  
  # Extract components
  U <- svd_result$u
  d <- svd_result$d
  V <- svd_result$v
  
  # Calculate coordinates
  # Standard coordinates of sites (rows)
  site_coords_std <- sqrt(I) * U
  
  # Principal coordinates of species (columns)
  species_coords_prin <- Dc_inv_sqrt %*% V %*% diag(d)
  
  # Calculate inertia
  inertia <- sum(d^2)
  
  # Return results
  result <- list(
    site_coordinates = site_coords_std,
    species_coordinates = species_coords_prin,
    singular_values = d,
    inertia = inertia,
    eigenvalues = d^2,
    row_masses = rep(uniform_mass, I),
    col_masses = c,
    non_zero_cols = non_zero_cols
  )
  
  return(result)
}

# CA-relative function
ca_relative <- function(data_matrix) {
  # Try ca package first
  tryCatch({
    ca_result <- ca::ca(data_matrix)
    return(list(
      site_coordinates = ca_result$rowcoord,
      species_coordinates = ca_result$colcoord,
      singular_values = ca_result$sv,
      inertia = sum(ca_result$sv^2),  # Calculate inertia from singular values
      eigenvalues = ca_result$sv^2,
      row_masses = ca_result$rowmass,
      col_masses = ca_result$colmass
    ))
  }, error = function(e1) {
    cat("ca package failed, trying manual calculation...\n")
    
    # Manual CA calculation
    X <- as.matrix(data_matrix)
    n <- sum(X)
    P <- X / n
    
    # Row and column masses
    r <- rowSums(P)
    c <- colSums(P)
    
    # Row profiles
    Dr_inv <- diag(1/r)
    row_profiles <- Dr_inv %*% P
    
    # Center with respect to average profile c
    centered_profiles <- row_profiles - matrix(rep(c, each = nrow(X)), nrow = nrow(X))
    
    # Apply chi-square metric
    Dr_sqrt <- diag(sqrt(r))
    Dc_inv_sqrt <- diag(1/sqrt(c))
    S <- Dr_sqrt %*% centered_profiles %*% Dc_inv_sqrt
    
    # SVD
    svd_result <- svd(S)
    
    # Coordinates
    site_coords <- diag(1/sqrt(r)) %*% svd_result$u %*% diag(svd_result$d)
    species_coords <- diag(1/sqrt(c)) %*% svd_result$v
    
    return(list(
      site_coordinates = site_coords,
      species_coordinates = species_coords,
      singular_values = svd_result$d,
      inertia = sum(svd_result$d^2),
      eigenvalues = svd_result$d^2,
      row_masses = r,
      col_masses = c
    ))
  })
}

# Plotting function
plot_ca_biplot <- function(ca_result, title = "CA Biplot", 
                           site_labels = NULL, species_labels = NULL,
                           axes = c(1, 2)) {
  
  # Check if we have enough dimensions
  max_dim <- min(ncol(ca_result$site_coordinates), ncol(ca_result$species_coordinates))
  if(max(axes) > max_dim) {
    axes <- c(1, min(2, max_dim))
    warning(paste("Adjusted axes to", paste(axes, collapse = ", ")))
  }
  
  # Extract coordinates for specified axes
  site_coords <- ca_result$site_coordinates[, axes, drop = FALSE]
  species_coords <- ca_result$species_coordinates[, axes, drop = FALSE]
  
  # Check for finite values
  if(any(!is.finite(site_coords)) || any(!is.finite(species_coords))) {
    stop("Non-finite coordinates detected - cannot create plot")
  }
  
  # Calculate plot ranges with some padding
  x_range <- range(c(site_coords[,1], species_coords[,1]))
  y_range <- range(c(site_coords[,2], species_coords[,2]))
  
  # Add padding
  x_padding <- diff(x_range) * 0.1
  y_padding <- diff(y_range) * 0.1
  x_range <- x_range + c(-x_padding, x_padding)
  y_range <- y_range + c(-y_padding, y_padding)
  
  # Calculate axis labels with variance explained
  if(length(ca_result$eigenvalues) >= max(axes)) {
    axis1_var <- round(ca_result$eigenvalues[axes[1]] / ca_result$inertia * 100, 1)
    axis2_var <- round(ca_result$eigenvalues[axes[2]] / ca_result$inertia * 100, 1)
  } else {
    axis1_var <- axis2_var <- ""
  }
  
  # Create plot
  plot(x_range, y_range, type = "n", 
       xlab = paste0("Dim ", axes[1], " (", axis1_var, "%)"),
       ylab = paste0("Dim ", axes[2], " (", axis2_var, "%)"),
       main = title)
  
  # Add grid
  abline(h = 0, v = 0, col = "gray", lty = 2)
  
  # Plot sites
  points(site_coords, pch = 19, col = "red", cex = 1.2)
  if(!is.null(site_labels)) {
    text(site_coords, labels = site_labels, pos = 3, col = "red", cex = 0.8)
  }
  
  # Plot species  
  points(species_coords, pch = 17, col = "blue", cex = 0.8)
  if(!is.null(species_labels) && length(species_labels) == nrow(species_coords)) {
    text(species_coords, labels = species_labels, pos = 1, col = "blue", cex = 0.6)
  }
  
  # Add legend
  legend("topright", legend = c("Sites", "Species"), 
         pch = c(19, 17), col = c("red", "blue"), cex = 0.8)
}

# Modified ca_raw function to return both principal coordinates
ca_raw_symmetric <- function(data_matrix) {
  # Convert to matrix and ensure it's numeric
  X <- as.matrix(data_matrix)
  X[is.na(X)] <- 0
  
  # Get dimensions
  I <- nrow(X)
  J <- ncol(X)
  
  # Calculate grand total
  n <- sum(X)
  
  # Create P matrix (proportions)
  P <- X / n
  
  # Calculate column totals (species masses)
  c <- colSums(P)
  
  # Remove columns with zero totals if any
  non_zero_cols <- c > 0
  if(sum(non_zero_cols) < J) {
    P <- P[, non_zero_cols, drop = FALSE]
    c <- c[non_zero_cols]
    J <- sum(non_zero_cols)
  }
  
  # For CA-raw, use uniform row masses
  uniform_mass <- 1/I
  ones_vector <- rep(1, I)
  
  # Create uniform profile
  uniform_profile <- matrix(rep(c, each = I), nrow = I, ncol = J) / I
  
  # Center with respect to uniform profile
  P_centered <- P - uniform_profile
  
  # Apply chi-square transformation
  Dc_inv_sqrt <- diag(1/sqrt(c))
  S_star <- sqrt(I) * P_centered %*% Dc_inv_sqrt
  
  # Perform SVD
  svd_result <- svd(S_star)
  
  U <- svd_result$u
  d <- svd_result$d
  V <- svd_result$v
  
  # Calculate BOTH sets of principal coordinates (symmetric scaling)
  # Sites in principal coordinates
  site_coords_prin <- sqrt(I) * U %*% diag(d)
  
  # Species in principal coordinates  
  species_coords_prin <- Dc_inv_sqrt %*% V %*% diag(d)
  
  # Calculate inertia
  inertia <- sum(d^2)
  
  return(list(
    site_coordinates = site_coords_prin,
    species_coordinates = species_coords_prin,
    singular_values = d,
    inertia = inertia,
    eigenvalues = d^2,
    row_masses = rep(uniform_mass, I),
    col_masses = c,
    non_zero_cols = non_zero_cols
  ))
}

# Function to create the symmetric CA-raw plot
plot_ca_raw_symmetric <- function(data_matrix, site_labels = NULL, species_labels = NULL) {
  
  # Run CA-raw with symmetric coordinates
  ca_raw_result <- ca_raw_symmetric(data_matrix)
  
  # Extract first two dimensions
  site_coords <- ca_raw_result$site_coordinates[, 1:2, drop = FALSE]
  species_coords <- ca_raw_result$species_coordinates[, 1:2, drop = FALSE]
  
  # Calculate percentages
  axis1_var <- round(ca_raw_result$eigenvalues[1] / ca_raw_result$inertia * 100, 1)
  axis2_var <- round(ca_raw_result$eigenvalues[2] / ca_raw_result$inertia * 100, 1)
  
  # Calculate plot ranges
  all_coords <- rbind(site_coords, species_coords)
  x_range <- range(all_coords[,1])
  y_range <- range(all_coords[,2])
  
  # Add padding
  x_padding <- diff(x_range) * 0.1
  y_padding <- diff(y_range) * 0.1
  x_range <- x_range + c(-x_padding, x_padding)
  y_range <- y_range + c(-y_padding, y_padding)
  
  # Create plot
  plot(x_range, y_range, type = "n",
       xlab = paste0("Dim 1 (", axis1_var, "%)"),
       ylab = paste0("Dim 2 (", axis2_var, "%)"),
       main = "Raw CA")
  
  # Add grid
  abline(h = 0, v = 0, col = "gray", lty = 2)
  
  # Plot sites
  points(site_coords, pch = 19, col = "red", cex = 1.2)
  if(!is.null(site_labels)) {
    text(site_coords, labels = site_labels, pos = 3, col = "red", cex = 0.8)
  }
  
  # Plot species
  points(species_coords, pch = 17, col = "blue", cex = 0.8)
  if(!is.null(species_labels)) {
    # Adjust species labels if columns were removed
    if("non_zero_cols" %in% names(ca_raw_result)) {
      species_labels_adj <- species_labels[ca_raw_result$non_zero_cols]
    } else {
      species_labels_adj <- species_labels
    }
    text(species_coords, labels = species_labels_adj, pos = 1, col = "blue", cex = 0.6)
  }
  
  # Add legend
  legend("topright", legend = c("Sites", "Species"), 
         pch = c(19, 17), col = c("red", "blue"), cex = 0.8)
  
  return(ca_raw_result)
}

# Your data
data_matrix <- matrix(c(
  3910, 4680, 5110, 2803, 3434, 4286,  # Burns
  3810, 4450, 4710, 2085, 2405, 3067,  # Cinnamon
  3320, 3120, 3390, 1270, 1403, 1296,  # Sweet
  1540, 1820, 1760, 769, 930, 876,     # Rend
  2440, 2550, 3030, 800, 1082, 877     # Thai
), nrow = 5, byrow = TRUE)

rownames(data_matrix) <- c("Burns", "Cinnamon", "Sweet", "Rend", "Thai")
colnames(data_matrix) <- c("E11", "E12", "E13", "E21", "E22", "E23")

site_labels <- rownames(data_matrix)
species_labels <- colnames(data_matrix)

# Create the symmetric CA-raw plot
ca_raw_symmetric_result <- plot_ca_raw_symmetric(data_matrix, site_labels, species_labels)

# Print some information
cat("\nCA-raw Symmetric Biplot Information:\n")
cat("Total inertia:", round(ca_raw_symmetric_result$inertia, 4), "\n")
cat("First 2 axes explain:", round(sum(ca_raw_symmetric_result$eigenvalues[1:2])/ca_raw_symmetric_result$inertia*100, 1), "%\n")
cat("Both sites and species are shown in principal coordinates\n")
cat("Distances between all points are meaningful in chi-square metric\n")
